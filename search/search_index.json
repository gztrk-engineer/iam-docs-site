{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to my site and please take a look at a few documentation examples. </p> <p>If you like the examples and need quality technical content, reach out to me on LinkedIn. </p> <p>Note</p> <p>The site is under construction and doesn't provide all materials. </p>"},{"location":"#video-example","title":"Video example","text":""},{"location":"#web-documentation-examples","title":"Web documentation examples","text":"<p>Check the site sections:  </p> <ul> <li>B2B Authentication.  Describes how to integrate an authentication service in a range of B2B and B2B2C scenarios.  </li> <li>IAM: Additional topics. Provides assorted guides to Identity and Access Management (IAM) products.  </li> <li>Other topics. </li> </ul> <p>More examples are on the way, so check back for updates soon. </p>"},{"location":"B2B-Authentication/","title":"Overview","text":""},{"location":"B2B-Authentication/#_1","title":"Overview","text":"<p>Note</p> <p>This section draft includes general directions on how to integrate an Identity and Access Management system in a range of B2B and B2B2C setups. </p> <p>Here at Transmit, we allow B2B (business-to-business) customers to integrate Identity and Account Management into their services. </p> <p>From a broad perspective, our platform enables B2B customers to: </p> <ul> <li>Enable organizations, e.g., the suppliers, and their employees to access corporate apps</li> <li>Grant and revoke organization and user access to apps and resources   </li> <li>Use role-based access controls (RBAC) for management of roles and permissions across applications</li> <li>Integrate single sign-on (SSO) so users only need to log in once on all relevant apps</li> </ul> <p>You can start out with our B2B solution here:  </p> <ul> <li>How it works</li> <li>Log in members </li> <li>Manage and assign roles</li> </ul>"},{"location":"B2B-Authentication/how-it-works/","title":"How it works","text":"<p>Transmit implements a tenant-based model that includes organizations, users, and applications. You can manage multiple tenants, each serving a separate set of organizations and apps. </p> <p>What brings the tenant-based model together is user memberships and the role based access controls: typically, a user needs to be an organization member to have access to apps' roles and permissions. </p> <p></p> <p>The functionality is available through both the Admin Portal and via APIs.  </p>"},{"location":"B2B-Authentication/how-it-works/#about-organizations","title":"About organizations","text":""},{"location":"B2B-Authentication/how-it-works/#organizations","title":"Organizations","text":"<p>Organizations represent your business customers or partners. For instance, a food delivery service might give restaurants and kitchens special access to their app so they can see orders and send out deliveries.  </p> <p>Organizations are created on the tenant level; each organization can be provided access to one or more applications.  </p> <p>You can manage organizations via our APIs or through the Admin Portal. In addition to this, we provide special tools like dedicated APIs and self-service portals so the organizations can control their own memberships if they want. </p>"},{"location":"B2B-Authentication/how-it-works/#members","title":"Members","text":"<p>Members are the people who belong to an organization, like customers or employees. For example, think about a ride-sharing app that tells drivers about new rides or any order changes. These drivers are the members of the organization.</p> <p>You can add members to an organization in multiple ways:</p> <ul> <li>They can sign up via your app (that uses our APIs).   </li> <li>You can invite them through email. </li> <li>They can log in through an external provider (Google, Okta, etc).  </li> </ul> <p>There is difference between a user and a member (we recognize the users by the <code>user_id</code> value). A user may have memberships in multiple organizations. Therefore, we uniquely identify a member by the <code>user_id</code> + <code>org_id</code> combination.  </p> <p>Plus, a user can log in either directly using their personal account (if the app allows B2C scenarios), or they can log in within the context of organization they belong to. </p>"},{"location":"B2B-Authentication/how-it-works/#authentication","title":"Authentication","text":"<p>An application can authenticate members in several ways. They can:</p> <ul> <li>Use the app's internal authentication providing you pass the <code>org_id</code> value in the request.  </li> <li>Allow the organization to configure a custom OIDC or SAML identity provider (IDP). If a third-party IDP is used, the member will need to have an email address that matches the organization's domain.  </li> </ul>"},{"location":"B2B-Authentication/how-it-works/#access-control","title":"Access control","text":"<p>An organization can control the access of members to the application by assigning roles. For additional information, see Role-based access.  </p>"},{"location":"B2B-Authentication/how-it-works/#role-based-access","title":"Role-based access","text":"<p>Role-based access control (RBAC) is a technique for restricting system access based on the user roles. Each user in granted one or multiple roles and each role is assigned permissions. These permissions determine the user's level of access to your application. </p> <p>For example, a retail website can display different pricing models to buyers and consumers, while a payment app may expose more sensitive business data to partners than to customers. </p>"},{"location":"B2B-Authentication/how-it-works/#roles-and-permissions","title":"Roles and permissions","text":"<p>In your app, you can create roles that are specific to the application; for each role, you can define the permissions the role provides. For example, in a food delivery app, you may have a Kitchen Assistant role that is granted permission to view the upcoming orders and check the locations of dispatched orders on a map.  </p> <p>These roles determine what members can do once they log in. You can retrieve member roles directly through an API request or have them included in access/ID tokens when users successfully authenticate.</p>"},{"location":"B2B-Authentication/how-it-works/#role-groups","title":"Role groups","text":"<p>Roles are typically assigned by organizations, but applications have control which roles the organizations can choose from.  </p> <p>The application creates role groups with specific sets of roles and then assigns role groups to organizations. This means the organizations can only choose from roles that belong to the assigned role groups.  </p>"},{"location":"B2B-Authentication/login-members/","title":"Log in members","text":""},{"location":"B2B-Authentication/login-members/#step-1-set-up-organization","title":"Step 1: Set up organization","text":"<p>At this stage, you need to set up your organization(s). You can add an organization both through the Admin Portal (Identity management &gt; Organizations) or via the Organization API.</p> <p>Here's an example request that creates an organization:  </p> <pre><code>curl -i -X POST \\\n  {{BASE_URL}}/v1/organizations \\\n  -H 'Authorization: Bearer &lt;YOUR_JWT_HERE&gt;' \\\n  -H 'Content-Type: application/json' \\\n  # Required parameters: organization name, domain, and app ID(s)\n  -d '{\n    \"name\": \"string\",\n    \"domain\": \"string\",\n    \"app_ids\": [\n      \"string\"\n    ]\n  }'\n</code></pre> <p>When the platform saves an organization, it assigns it a unique ID. Later on, you may add more organizations, for example, your customers or partners.  </p>"},{"location":"B2B-Authentication/login-members/#step-2-enable-authentication","title":"Step 2: Enable authentication","text":"<p>You have the following authentication options:  </p> Option to implement Description Internal app authentication Use the app's intenal authentication, but pass the <code>org_id</code> value in the response. Single Sign-on (SSO) federation If you have an account with a third-party IDP (Identity Provider), implement OIDC or SAML SSO federation. Hosted application Implement Transmit's hosted app experience."},{"location":"B2B-Authentication/login-members/#step-3-assign-organization-administrators","title":"Step 3: Assign organization administrators","text":"<p>Now you need to add an organization admin. An organization admin can use the org admin portal: add organization members and management apps, view available roles and assign them to the members. </p> <p>You can add an org admin by invoking this API call or through the Admin Portal (Identity Management &gt; Organizations, then open the Members tab on your org's page). </p> <p>Here's an example request that adds an org admin:  </p> <pre><code>curl -i -X POST \\\n  '{{BASE_URL}}/v1/organizations/{organization_id}/members' \\\n  -H 'Authorization: Bearer &lt;YOUR_JWT_HERE&gt;' \\\n  -H 'Content-Type: application/json' \\\n  # The payload provides minimum data for a new user: unique identifier (email in this case) and a role ID.\n  # For this role, role id equals role name: 'Organization Admin'\n  -d '{\n    \"email\": \"string\",\n    \"role_ids\": [\n      \"Organization Admin\"\n    ]\n  }'\n</code></pre>"},{"location":"B2B-Authentication/login-members/#step-4-invite-members","title":"Step 4: Invite members","text":"<p>You can invite members both on the application and organization levels. </p> <p>On the application level, you can use this API request or the Admin Portal (Identity Management &gt; Organizations, then open the Members tab on your organization's page). </p> <p>To invite members on the organization level, open the organization portal, go to Members, click +Add member, and enter the member's details.  </p> <p>Required parameters: </p> <ul> <li>Member's email and/or phone number  </li> <li>Assigned app roles  </li> </ul> <p>Here's an example request that creates a member:  </p> <pre><code>curl -i -X POST \\\n  # Include the org ID in the path. \n  '{{BASE_URL}}/v1/organizations/{organization_id}/members' \\\n  -H 'Authorization: Bearer &lt;YOUR_JWT_HERE&gt;' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    # Primary email\n    \"email\": \"string\",\n    # User identifier. Required unless you want to use the email as primary ID. \n    \"username\": \"string\",\n    \"credentials\": {\n      # New password (required)\n      \"password\": \"string\",\n      # True means this is a temp password: the user has to change it upon first login.\n      \"force_replace\": true\n    },\n    # At least one role ID is required. \n    \"role_ids\": [\n      \"string\"\n    ],\n    # Sends an invite to the specified email address. \n    \"send_invite\": true\n  }'\n</code></pre> <p>In addition to inviting a member via email, you can create a UI for self-serving signup and allow the users to register on their own.  </p> <p>When saving the user, the platform marks their account as <code>Pending</code> and sends the user a confirmation message. When the user clicks the confirmation link and starts using the account, the platform marks the account as <code>Active</code>.  </p> <p>Note</p> <p>You can invite a user to multiple organizations. If you use a hosted application, users who have memberships in multiple organizations </p> <p>Visit Manage users for additional information.  </p>"},{"location":"B2B-Authentication/login-members/#next-steps","title":"Next steps","text":""},{"location":"B2B-Authentication/login-members/#provide-role-based-access","title":"Provide role-based access","text":"<p>Roles are basically collections of app permissions. By assigning app roles to users, you authorize them to use the app's functionality.  </p> <p>You can control which app roles are available to organizations through role groups. </p> <p>Applications can assign user roles via API and through the Admin Portal. Organizations can assign member roles via the organization admin portal.  </p> <p>To find out how to manage role-based access, see Manage and assign roles.  </p>"},{"location":"B2B-Authentication/login-members/#update-personal-information","title":"Update personal information","text":"<p>You can add information to user profiles by yourself, through the Identity Management API or in the Admin Portal. Alternatively, you may implement a profile update page using this API call and invite the members to update their profiles on their own.  </p>"},{"location":"B2B-Authentication/login-members/#learn-more","title":"Learn more","text":"<ul> <li>Organization API </li> <li>Members API </li> <li>Users API </li> </ul>"},{"location":"B2B-Authentication/manage-roles/","title":"Manage and assign roles","text":"<p>Roles are essentially collections of permissions that enable the members to use the application's features.  </p>"},{"location":"B2B-Authentication/manage-roles/#step-1-create-roles","title":"Step 1: Create roles","text":"<p>Each organization provides default roles: <code>Organization member</code>, <code>Organization admin</code>, and <code>Organization creator</code>. </p> <p>If you need additional roles, you should add them on your own. You can either invoke this Roles API call or use the Admin Portal (Indentity Management &gt; Roles). The API call has the advantage of enabling you to specify the app permissions that belong to the role:</p> <pre><code>curl -i -X POST \\\n  '{{BASE_URL}}/v1/applications/{app_id}/roles' \\\n  -H 'Authorization: Bearer &lt;YOUR_JWT_HERE&gt;' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"role_name\": \"string\",\n    \"permissions\": [\n      \"string\"\n    ],\n    \"description\": \"string\",\n    \"display_name\": \"string\"\n  }'\n</code></pre> <p>Here's an example of information you can retrieve via the Roles API:  </p> <pre><code>{\n    \"result\": [\n        {\n            \"role_id\": \"examplete8j03evryvi6w\",\n            \"role_name\": \"AcmeCustomer\",\n            \"permissions\": [\n                \"searchForItems\",\n                \"manageCart\",\n                \"checkoutCart\",\n            ],\n            \"description\": \"Customers can buy products in our online store\",\n            \"display_name\": \"AcmeCustomer\",\n            \"app_id\": \"example4o9m1k7kkzj2uo\"\n        }\n    ]\n}\n</code></pre>"},{"location":"B2B-Authentication/manage-roles/#step-2-add-role-groups","title":"Step 2: Add role groups","text":"<p>Role groups are a way for applications to control which roles the organizations can assign to their members. </p> <p>A role group is a collection of roles an application can create and assign to organizations. Hence, the organizations can only choose from roles that belong to the assigned role groups.  </p> <p>To set up a role group or add existing roles to it, you have the following options:  </p> <ul> <li>Invoke this API call. </li> <li>Go to the Admin Portal (Identity Management &gt; Roles) and create a role group Groups tab.  </li> </ul> <p>Here's an example API call that creates a role:  </p> <pre><code>curl -i -X POST \\\n  # Include the app ID in the path.  \n  '{{BASE_URL}}/v1/applications/{app_id}/role-groups' \\\n  -H 'Authorization: Bearer &lt;YOUR_JWT_HERE&gt;' \\\n  -H 'Content-Type: application/json' \\\n  # Required values: role IDs and name of the role group\n  -d '{\n    \"role_ids\": [\n      \"role_id1\",\n      \"role_id2\"\n    ],\n    \"name\": \"My Group\",\n    \"description\": \"My Group's description\",\n    \"display_name\": \"string\"\n  }'\n</code></pre>"},{"location":"B2B-Authentication/manage-roles/#step-3-assign-roles-to-members","title":"Step 3: Assign roles to members","text":"Application Organization <p>To manage the members' access to an app, an organization can assign roles to its members. The organization can only choose the roles from the role groups that the application assigned to the organization.  You can assign roles via API for new members or existing members, and via the Admin Portal (Identity Management &gt; Organizations, then open the Members tab on your organization's page). </p> <p>On the organization level, you can assign roles to new / existing members through the organization admin portal (go to Members). </p> <p>Here's an example API call that assigns roles to a new member:  </p> <pre><code>curl -i -X POST \\\n  # Include app Id, org ID, and user ID in the requested URL.\n  '{{BASE_URL}}/v1/applications/{app_id}/organizations/{organization_id}/members/{user_id}/roles' \\\n  -H 'Authorization: Bearer &lt;YOUR_JWT_HERE&gt;' \\\n  -H 'Content-Type: application/json' \\\n  # Include the role IDs in the request body.  \n  -d '{\n    \"role_ids\": [\n      \"string1\",\n      \"string2\"\n    ]\n  }'\n</code></pre>"},{"location":"B2B-Authentication/manage-roles/#step-4-retrieve-member-roles","title":"Step 4: Retrieve member roles","text":"<p>You can get members' roles from identity and access tokens, or via Members API.  </p>"},{"location":"B2B-Authentication/manage-roles/#retrieving-member-roles-from-the-tokens","title":"Retrieving member roles from the tokens","text":"<p>You can get role names from ID tokens and role ID from access tokens:  </p> <ol> <li>Decode the tokens. </li> <li>Retrieve the values:  <ul> <li>From ID token: Custom claim <code>role_values</code></li> <li>From access token: Claim <code>roles</code> </li> </ul> </li> </ol> <p>Example <code>role_values</code> claim: <pre><code>{ \"role_values\": [\"author\", \"sales\", \"Organization Admin\"] }\n</code></pre></p> <p>Example <code>roles</code> claim:  </p> <pre><code>// This claim provides role IDs instead of role values\n{ \"roles\": [\"943abcdhu8ykuwdi2lmzm\", \"65vjd08hu8ykuwdi2lmzm\", \"Organization Admin\"] }\n</code></pre>"},{"location":"B2B-Authentication/manage-roles/#retrieving-member-roles-via-api","title":"Retrieving member roles via API","text":"<p>To get member roles via Members API, invoke this API call call and retrieve the info from the output.  Example API request:  </p> <pre><code>curl -i -X GET \\\n  # Include the org ID and the user ID in the requested URL. \n  '{{BASE_URL}}/v1/organizations/{organization_id}/members/{user_id}' \\\n  -H 'Authorization: Bearer &lt;YOUR_JWT_HERE&gt;'\n</code></pre> <p>Example API call output:  </p> <pre><code>{\n    \"result\": {\n        \"user_id\": \"exampleqytq5lehc68ruc\",\n        \"created_at\": 1689848110338,\n        \"updated_at\": 1692891468793,\n        // Other values\n        \"roles\": [\n            {\n                \"role_id\": \"123abcdhu8ykuwdi2lmzm\",\n                \"role_name\": \"Author\",\n                \"display_name\": \"author\"\n            },\n            {\n                \"role_id\": \"123abcdujl1wwu11pms22\",\n                \"role_name\": \"Sales\",\n                \"display_name\": \"sales\"\n            },\n            {\n                \"role_id\": \"Organization Admin\",\n                \"role_name\": \"Organization Admin\",\n                \"display_name\": \"Organization Admin\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"B2B-Authentication/manage-roles/#fetch-role-permissions","title":"Fetch role permissions","text":"<p>You can fetch your app's permissions by sending this API call:  </p> <pre><code>curl -i -X GET \\\n  # Include the app ID in the requested URL. \n  '{{BASE_URL}}/v1/applications/{app_id}/roles' \\\n  -H 'Authorization: Bearer &lt;YOUR_JWT_HERE&gt;'\n</code></pre> <p>This returns an array of roles that may include permissions. Example output:  </p> <pre><code>{\n  \"result\": [\n    {\n      \"role_id\": \"abc123dujl1wwu11pms22\",\n      \"role_name\": \"AcmeCustomer\",\n      \"permissions\": [\n        \"manageCart\",\n        \"checkoutCart\"\n      ],\n      \"app_id\": \"748abcdhu8yk231i2lmzm\",\n      \"description\": \"Enables an authorized user to buy things at our online store.\",\n      \"display_name\": \"AcmeCustomer\"\n    }\n  ]\n}\n</code></pre> <p>Note</p> <p>We recommend caching app permissions for each role. You may not update roles frequently and caching will prevent you from sending excessive calls to our servers. Make sure to set a reasonable cache time-to-live (TTL).</p>"},{"location":"B2B-Authentication/manage-roles/#learn-more","title":"Learn more","text":"<ul> <li>Roles API</li> <li>Members API </li> </ul>"},{"location":"IAM-More-Topics/","title":"In this section","text":"<p>These section includes the following web documentation examples:</p> <ul> <li>Federate SSO via OIDC</li> <li>Manage user groups </li> <li>Implement IDV native webview using hosted experience</li> <li>Verify identities via IDV Web SDK</li> <li>Use custom SMS providers</li> <li>About log streaming and Feed audit logs to Splunk</li> </ul>"},{"location":"IAM-More-Topics/federate-oidc/","title":"Federate SSO through OIDC","text":"<p>With our platform, you can federate single sign-on (SS0) through third-party OIDC providers. </p> <p>Open ID Connect (OIDC) is an extension that provides an identity layer on top of OAuth 2.0 authorization framework. OIDC is commonly used to federate authentication and identity management, as well as to enable single sign-on (SSO) across different applications and organizations.  </p> <p>Transmit supports identity federation through external OIDC identity providers (IDPs). For example, B2B apps can allow your business customers or partners to provide SSO login for their members. This simplifies identity management and gives users a seamless identity experience.  </p>"},{"location":"IAM-More-Topics/federate-oidc/#how-it-works","title":"How it works","text":"<p>Here's an example OIDC flow that you can implement. Interactions with Transmit are highlighted in pink; the diagram also shows where the integration steps come into play:  </p> <p> </p> <ol> <li>A user wants to login; your app requests to start an SSO login flow.</li> <li>If the user is a member of an organization configured for OIDC SSO, Transmit redirects to the OIDC Identity Provider.</li> <li>After authenticating the user, the IDP redirects to Transmit backend with OIDC code.</li> <li>Transmit gets user data from the IDP. </li> <li>Transmit redirects to your backend with its code. </li> <li>Your backend exchange the code for the access/ID tokens.  </li> </ol>"},{"location":"IAM-More-Topics/federate-oidc/#before-you-start","title":"Before you start","text":"<p>Before a B2B app can use OIDC SSO to login users, the tenant must have the following B2B configurations in place:  </p> <ul> <li>Application - representing the B2B app, and must integrate OIDC SSO (see steps 1-2 below)  </li> <li>Organization - representing business customers or partners, and assigned to the app  </li> <li>Members - users that are created or added as members of the organization.  </li> </ul> <p>Note</p> <p>Each member must have a primary email address at the organization's domain. Members must be assigned to the app, unless the app is enabled for public sign-ups, in which case the user is added automatically to the app upon their initial login. </p>"},{"location":"IAM-More-Topics/federate-oidc/#step-1-start-oidc-sso","title":"Step 1: Start OIDC SSO","text":"<p>Your B2B app should invoke the OIDC SSO flow when a user requests to log in by navigating to <code>/v1/auth/sso/start</code> in a browser. This sends a GET request like this:  </p> <pre><code>https://api.transmitsecurity.io/cis/v1/auth/sso/start?\nclient_id=CLIENT_ID&amp; // Client ID (B2B app settings).  \nemail=EMAIL&amp; // User's email address. The domain must correspond to the OIDC SSO configurations. \nredirect_uri=REDIRECT_URI // Transmit redirects to this URI after completing this request.  \n</code></pre> <p>If the email domain corresponds to an organization that's configured for OIDC SSO, the user is redirected to the configured OIDC identity provider. Otherwise, an error is returned and the app can proceed with a regular authentication flow.  </p>"},{"location":"IAM-More-Topics/federate-oidc/#step-2-complete-the-login","title":"Step 2: Complete the login","text":"<p>To complete the login, your B2B app should create an endpoint that gets user tokens. This endpoint should accept <code>code</code> as a query parameter, and be configured as an allowed redirect URI in the Transmit Admin Portal.</p> <p>Once invoked, it should send an <code>/oidc/token</code> request like the one below to exchange the code for user tokens.  For improved security, validate the tokens. The ID token includes the organization and the email of the user that completed the authentication; make sure this matches the user email you requested.  </p> <pre><code>import fetch from 'node-fetch';\n\nasync function run() {\n  const resp = await fetch(\n    `https://api.transmitsecurity.io/cis/v1/oidc/token`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        code: '[CODE]', // Code returned to your redirect URI\n        client_id: '[CLIENT_ID]', // Client ID found in your app settings\n        client_secret: '[CLIENT_SECRET]' // Client secret found in your app settings\n      })\n    }\n  );\n\n  const data = await resp.json();\n  console.log(data);\n}\n\nrun();\n</code></pre>"},{"location":"IAM-More-Topics/federate-oidc/#step-3-configure-your-idp-account","title":"Step 3: Configure your IDP account","text":"<p>To login members using their own IDP, an organization must configure their IDP account to work with Transmit. Typically, this involves creating a client and configuring the redirect URI that users will be redirected to after authentication. The required parameters vary from provider to provider.  </p> <p>For the IDP client, the organization should specify the following redirect URI value: <code>{{BASE_URL}}/auth/sso/oidc/callback</code> </p> <p>Also note the client ID and the client secret values the IDP normally generates upon saving the client. You will need them for SSO configuration.   </p> <p>Learn more</p> <p>See example Google IDP configurations. </p>"},{"location":"IAM-More-Topics/federate-oidc/#step-4-add-sso-configuration","title":"Step 4: Add SSO configuration","text":"<p>The OIDC SSO flow is initiated and completed by the B2B app on behalf of the organization.</p> <p>Configure the organization for OIDC SSO in the Transmit system. You can do this from the organization's settings in the Admin Portal (Identity Management &gt; Organizations). You'll need to obtain the details from the OIDC IDP (for example,from their documentation):  </p> <ul> <li>Basic parameters:  <ul> <li>SSO configuration name  </li> <li>B2B application from the list  </li> <li>SSO provider type: OIDC Provider </li> </ul> </li> <li>SSO configurations (see example configurations for Google IDP):  <ul> <li>Identity provider issuer URL: IDP's issuer URL  </li> <li>Client ID: Client ID in the IDP account </li> <li>Client secret: Client secret in the IDP account  </li> <li>Email claim: Name of the ID token claim that contains the user's primary email. Default value: <code>email</code> </li> </ul> </li> </ul>"},{"location":"IAM-More-Topics/federate-oidc/#google-idp-example","title":"Google IDP example","text":"<p>To set up Google IDP, you need to go to Google Credentials, create an OIDC Client, and specify the following parameters:  </p> <ul> <li>Authorized redirect URIs: Enter the default value: <code>https://api.transmitsecurity.io/cis/auth/sso/oidc/callback</code>.</li> <li>Authorized JavaScript origins: Specify your production, staging, and/or development environments. Example development environment: <code>https://localhost:3000</code> (default for React JS).  </li> </ul> <p>Google IDP generates new credentials (Client ID and Client secret) automatically. You can add new secrets after saving the OIDC client.  </p> <p> </p> <p>For successful Google IDP OIDC SSO integration, you need to enter the following parameters:  </p> <ul> <li>Identity provider issuer URL: <code>https://accounts.google.com</code>. </li> <li>Client ID: Your client ID with Google IDP.  </li> <li>Client secret: Your client secret with Google IDP. </li> <li>Email claim: Use the default value: <code>email</code>.  </li> </ul> <p> </p>"},{"location":"IAM-More-Topics/manage-groups/","title":"Manage user groups","text":"<p>Groups are a way to categorize users. Consider a scenario where a tenant has multiple websites, with a group of FC Barcelona fans spread across all users. </p> <p>To provide additional context for the group, you may include custom data as a nested object.  </p> <p>You can manage the groups through the Groups API.  </p>"},{"location":"IAM-More-Topics/manage-groups/#usage-examples","title":"Usage examples","text":"<p>You can categorize users based on certain criteria and then look up necessary information or perform batch actions:  </p> <ul> <li>Congratulate FC Manchester City fans on another championship.</li> <li>Send your best Diwali wishes to Indian customers.</li> <li>Search for experts within an HR or R&amp;D group.</li> </ul> <p>Depending on your use case, you may use the groups for research purposes. Consider fetching users, identifying their group memberships, and analyzing common patterns.  </p>"},{"location":"IAM-More-Topics/manage-groups/#step-1-create-groups","title":"Step 1: Create groups","text":"<p>To create a group, use this API call:  </p> <pre><code>curl -i -X POST \\\n  {{BASE_URL}}/v1/groups \\\n  -H 'Authorization: Bearer &lt;APPLICATION_LEVEL_JWT_TOKEN&gt;' \\\n  -H 'Content-Type: application/json' \\\n  # You may include optional data as a nested object (`custom_data`).\n  # Consider providing additional context. \n  -d '{\n    \"name\": \"string\",\n    \"description\": \"string\",    \n    \"custom_data\": {\n      \"key\": \"value\"\n    }\n  }'\n</code></pre> Example output: <pre><code>{\n  \"result\": {\n    \"group_id\": \"4be2eff2574323ce\",\n    \"name\": \"FC Barcelona fans\",\n    \"description\": \"FC Barcelona fans across EMEA\",\n    \"created_at\": 1696481564,\n    \"updated_at\": 1696481564,\n    \"custom_data\": {\n      \"started_tracking\": \"2019-08-24T14:15:22Z\"\n    }\n  }\n}\n</code></pre>"},{"location":"IAM-More-Topics/manage-groups/#step-2-add-users-to-groups","title":"Step 2: Add users to groups","text":"<p>To add users to a group, use this API call:  </p> <pre><code>curl -i -X POST \\\n  # Include the group ID in the path and an array of user IDs in the body. \n  '{{BASE_URL}}/v1/groups/{group_id}/members' \\\n  -H 'Authorization: Bearer &lt;APPLICATION_LEVEL_JWT_TOKEN&gt;' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"user_ids\": [\n      \"string\"\n    ]\n  }'\n</code></pre>"},{"location":"IAM-More-Topics/manage-groups/#step-3-fetch-groups-of-a-user","title":"Step 3: Fetch groups of a user","text":"<p>You can fetch a user's groups, for example, to provide them with appropriate access / user experience. </p> <p>You can get the user group names from ID tokens by retrieving claim <code>groups</code>. </p> <p>Also, you can retrieve group IDs from user data:  </p> <pre><code>curl -i -X GET \\\n  # Include the user ID in the path. \n  '{{BASE_URL}}/v1/users/{user_id}/groups' \\\n  -H 'Authorization: Bearer &lt;APPLICATION_LEVEL_JWT_TOKEN&gt;'\n</code></pre> <p>This will return an array containing general information about all groups of the user:   </p> Example output: <pre><code>{\n  \"result\": [\n    {\n      \"group_id\": \"4be2eff2574323ce\",\n      \"name\": \"FC Barcelona fans\",\n      \"description\": \"FC Barcelona fans across EMEA\",\n      \"created_at\": 1696481564,\n      \"updated_at\": 1696481987,\n      \"custom_data\": {}\n    }\n  ]\n}\n</code></pre>"},{"location":"IAM-More-Topics/manage-groups/#step-4-fetch-users-of-a-group","title":"Step 4: Fetch users of a group","text":"<p>You can retrieve an array of all users within a group. For example, you can target a specific group in a campaign. Use this API call:  </p> <pre><code>curl -i -X GET \\\n  # Include the group ID in the requested URL. \n  '{{BASE_URL}}/v1/groups/{group_id}/members' \\\n  -H 'Authorization: Bearer &lt;APPLICATION_LEVEL_JWT_TOKEN&gt;'\n</code></pre> <p>The output will include entire user profiles.  </p> Example output: <pre><code>{\n  \"result\": [\n    {\n      \"email\": {\n        \"value\": \"string\",\n        \"email_verified\": true,\n        \"verified_at\": \"2019-08-24T14:15:22Z\"\n      },\n      \"secondary_emails\": [\n        {\n          \"value\": \"string\",\n          \"email_verified\": true,\n          \"verified_at\": \"2019-08-24T14:15:22Z\"\n        }\n      ],\n      \"phone_number\": {\n        \"value\": \"string\",\n        \"phone_number_verified\": true,\n        \"verified_at\": \"2019-08-24T14:15:22Z\"\n      },\n      \"secondary_phone_numbers\": [\n        {\n          \"value\": \"string\",\n          \"phone_number_verified\": true,\n          \"verified_at\": \"2019-08-24T14:15:22Z\"\n        }\n      ],\n      \"username\": \"string\",\n      \"user_id\": \"string\",\n      \"birthday\": \"2019-08-24T14:15:22Z\",\n      \"address\": {\n        \"country\": \"string\",\n        \"state\": \"string\",\n        \"city\": \"string\",\n        \"street_address\": \"string\",\n        \"postal_code\": \"string\",\n        \"type\": \"Home\",\n        \"updated_at\": 0\n      },\n      \"name\": {\n        \"title\": \"string\",\n        \"first_name\": \"string\",\n        \"last_name\": \"string\",\n        \"middle_name\": \"string\"\n      },\n      \"status\": \"Active\",\n      \"status_changed_at\": \"2019-08-24T14:15:22Z\",\n      \"created_at\": 0,\n      \"updated_at\": 0,\n      \"identity_providers\": [\n        {\n          \"source\": \"UserID\",\n          \"identifier\": \"string\",\n          \"email\": \"string\",\n          \"first_auth_date\": \"2019-08-24T14:15:22Z\",\n          \"last_auth_date\": \"2019-08-24T14:15:22Z\"\n        }\n      ],\n      \"identities\": [\n        {\n          \"provider_name\": \"string\",\n          \"provider_type\": \"OAuth2\",\n          \"auth_type\": \"webauthn\",\n          \"identifier\": \"string\",\n          \"user_alias\": {\n            \"type\": \"username\",\n            \"value\": \"string\"\n          },\n          \"first_auth_date\": \"2019-08-24T14:15:22Z\",\n          \"last_auth_date\": \"2019-08-24T14:15:22Z\"\n        }\n      ],\n      \"last_auth\": \"2019-08-24T14:15:22Z\",\n      \"external_account_id\": \"string\",\n      \"app_name\": \"string\",\n      \"custom_app_data\": {},\n      \"groupIds\": [\n        \"string\"\n      ],\n      \"picture\": \"string\",\n      \"language\": \"string\",\n      \"custom_data\": {},\n      \"external_user_id\": \"string\",\n      \"password_information\": {\n        \"expired\": true,\n        \"temporary\": true,\n        \"updated_at\": 0\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"IAM-More-Topics/manage-groups/#next-steps","title":"Next steps","text":"<p>Next steps depend on your requirements. Using Groups API, you can:  </p> <ul> <li>Retrieve all groups </li> <li>Get or update general information about a group  </li> <li>Remove users from a group</li> <li>Delete a group </li> </ul> <p>See the Groups API documentation for detailed information.  </p>"},{"location":"IAM-More-Topics/use-custom-sms-provider/","title":"Use custom SMS providers","text":"<p>To authenticate users or to verify their phone numbers, you can deliver one-time passcodes (OTPs) in SMS messages.  </p>"},{"location":"IAM-More-Topics/use-custom-sms-provider/#how-it-works","title":"How it works","text":"<p>By default, SMS messages are delivered via Transmit's own service, but you can configure the platform to send out SMS messages via Twilio, Salesforce Marketing Cloud (SMC), or other backend integrations. This feature may be useful if you already use a third-party SMS provider, when you investigate issues using the provider's logs, or when you need custom sender phone numbers. The configuration is set on a tenant's level.  </p> <p>For example, you may wish to send SMS messages from local phone numbers, as they are often considered more credible.  </p>"},{"location":"IAM-More-Topics/use-custom-sms-provider/#set-up-default-sms-provider","title":"Set up default SMS provider","text":"<p>Go to Settings &gt; SMS provider.  </p> <p>If you choose Default under SMS Provider, the platform will dispatch all your SMS messages via Transmit's own SMS service. This option doesn't require additional configuration outside Transmit's APIs.  </p>"},{"location":"IAM-More-Topics/use-custom-sms-provider/#set-up-twilio","title":"Set up Twilio","text":"<p>You can set up Twilio as your SMS provider from the Admin Portal. </p> <p>From Settings &gt; SMS provider, select Twilio as the SMS provider and configure the following settings: - Account SID: your Twilio account SID - Auth Token: your Twilio auth token - Sender setting: Allows you to either configure the sender phone number directly, or the Messaging Service ID to use the sender settings configured for your Twilio Messaging Service</p> <p>Note</p> <p>After saving, you should verify that SMS messages are sent as expected.</p> <p> </p>"},{"location":"IAM-More-Topics/use-custom-sms-provider/#set-up-saleforce-marketing-cloud","title":"Set up Saleforce Marketing Cloud","text":"<p>You can set up Salesforce Marketing Cloud (SMC) as your SMS provider from the Admin Portal.  </p> <p>From Settings &gt; SMS provider, select Salesforce Marketing Cloud as the SMS provider and configure the parameters:  </p> <ul> <li>Subdomain: Your Salesforce subdomain.  </li> <li>Client ID: Your client identifier with Salesforce (also known as Consumer key).  </li> <li>Client Secret: Your client secret with Salesforce (also known as Consumer secret).  </li> <li>Message ID: Your message identifier with Salesforce.  </li> <li>Package Type: The parameter enables you to choose legacy Salesforce packages. Default value: enhanced. Note that Salesforce has ended support for legacy packages.  </li> </ul> <p>Visit Salesforce: Safety Cloud for further information. </p> <p>Note</p> <p>After saving the configuration, you should verify that SMS delivery works as expected.  </p> <p> </p>"},{"location":"IAM-More-Topics/use-custom-sms-provider/#set-up-other-sms-providers","title":"Set up other SMS providers","text":"<p>You can integrate with other custom SMS providers by implementing a gateway. This gateway should listen for messages from Transmit whenever you need to send an SMS. Once the gateway receives a message, it should forward it as an SMS through the provider you've set up on your end.</p> <p>For a custom SMS gateway, you need to implement the following: </p> <ul> <li> <p>Two endpoints:  </p> <ul> <li>POST endpoint for SMS processing  </li> <li>GET endpoint for endpoint validation  </li> </ul> </li> <li> <p>One API call: register the endpoints with Transmit  </p> </li> </ul> <p>This setup will work in a manner similar to webhooks where IAM Auth will push messages to your POST endpoint.  </p> <p>To implement the SMS gateway:  </p> <ol> <li>Create an endpoint for SMS processing. Upon an incoming POST request with SMS data, the endpoint should check the <code>X-API-Key</code> value (must match <code>api_key</code> in step 3), dispatch the SMS, and respond with a success code (<code>200</code>). Example incoming cURL request:  </li> </ol> <p><pre><code># Example endpoint URI: \"https://acme.com/send-sms\"\ncurl --location --request POST '[GATEWAY_ENDPOINT_URI]' \\ \n--header 'Content-Type: application/json' \\ \n# API Key for endpoint registration (see step 3)  \n--header 'X-API-Key: {API_KEY}' \\ \n--data '{\n    \"phone_number\": string,\n    \"sender_id\": string,\n    \"message\": string\n}'\n</code></pre> 2. Create an additional GET endpoint (at the same URL) that handles the validation challenge. This endpoint should be able to accept a GET request with payload like this: </p> <p><pre><code>Accept: application/json, text/plain, */* \\\ncontent-length: 0 \\\nHost: example.com \\\n# API Key for endpoint registration (see step 3)\nX-API-Key: abcd1234-0fae-4ce6-97c4-ca9ad4123b0d \\ \nX-Scheme: https \\\nX-Verification-Key: AbCdZ3hJxx826qTmvwepy \\\n</code></pre> Each validation request includes a random <code>X-Verification-Key</code> value in the header. The verification endpoint should extract this value and echo it back in the response body so Transmit can match the request and response. Here's an example implementation that can process the validation challenge:  </p> <pre><code>app.define('/send-sms','GET', function(req, res) {\n\n    // Retrieve the header value.\n    var key = req.get(\"X-Verification-Key\");\n    // API key you register in step 3. \n    var my_api_key = \"abcd1234-0fae-4ce6-97c4-ca9ad4123b0d\";\n\n    // Make sure that the API key in the request is the same you specify in step 3.\n    if (req.get(\"X-API-Key\") != my_api_key) {  return res.send(400, \"Invalid request\"); }\n\n    // Set the response type.  \n    res.type('application/json');\n\n    // Set the status code of the response.\n    res.status(200);\n\n    // Send the key value in the response body. \n    res.json({  \"key\": key  });\n}\n</code></pre> <ol> <li>Register your endpoints on the platform. To do that, send a one-time request like this:    </li> </ol> <pre><code>curl --location --request PUT 'https://api.transmitsecurity.io/cis/v1/tenantsmsproviders' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer{BEARER_TOKEN}' \\\n# Include the gateway details in the payload. \n# Example URI: \"https://acme.com/send-sms\"\n--data '{\n    \"provider\": \"CustomGateway\",\n    \"custom_gateway\":{\n        \"uri\": \"{GATEWAY_ENDPOINT_URI}\", \n        \"api_key\": \"{API_KEY}\" \n}'\n</code></pre> <p>Upon this request, Transmit updates your SMS provider configuration and responds with the validation challenge (see step 2). If the validation is successful, the platform will start delivering SMS messages to your POST endpoint (see step 1).  </p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/","title":"IDV: Implement native webview using hosted experience","text":"<p>Note</p> <p>You can integrate our Identity Verification (IDV) hosted application into a native Android or iOS application. To do so, implement <code>CustomTabs</code>/<code>WebView</code>on Android or <code>ASWebAuthenticationSession</code> on IOS. For hybrid apps, we strongly recommend using the native Identity Verification SDKs (Android or IOS).</p> <p>At a high level, the process includes the following steps:</p> <ol> <li>Create a session</li> <li>Present the session to the user</li> <li>Handle a callback on session completion</li> </ol> <p>In order to handle the callback, you\u2019ll need to implement a mechanism (app links or custom schema links) through which your app can handle links.</p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#step-1-create-a-session","title":"Step 1: Create a session","text":"<p>To create your first identity verification session, you need to do the following:  </p> <ol> <li>Create an app in the admin portal. See Step 1 in the hosted experience guide. </li> <li>Obtain an access token on your backend. See Step 2 in the hosted experience guide.</li> <li>Use that access token to create a session. See Step 3 in the hosted experience guide. This will include the following:     3.1. The client will request the backend to create a session.     3.2. The backend response will contain a <code>start_token</code>. You can use this token to start the verification on the client side.</li> </ol> <p>Step 3 requires you to set the session <code>callback_url</code> value to a URL which will activate your app. See Step 3: Handle completion callback below for additional information.</p> <p>For additional context, see the Implement IDV hosted expirience.  </p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#step-2-present-the-session-to-user","title":"Step 2: Present the session to user","text":"<p>After creating your session, you need to direct your end user to the identity verification page: </p> <ol> <li>Use the <code>start_token</code> from the response (see API documentation for this call) to open the in-app browser tab. This is where the verification process will take place. Your options: <ul> <li>On Android, you can use <code>CustomTabs</code> or <code>WebView</code>.  </li> <li>On IOS, use <code>ASWebAuthenticationSession</code>.  </li> </ul> </li> <li>Make sure the in-app browser points to our web app: <code>https://api.transmitsecurity.io/verify/app/{start_token}</code> </li> </ol> Example `CustomTabs` Android implementation (Kotlin):  <pre><code>override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n   super.onActivityResult(requestCode, resultCode, data)\n   if (requestCode == RESULT_CODE_CHROME_TABS) {\n       if (resultCode == Activity.RESULT_CANCELED) {\n           //handle user cancellation\n       }\n   }\n}\n\nprivate fun startCustomTabsActivity() {\n   // Building the intent and starting the CustomTabsActivity\n   val customTabIntent: Intent\n\n   // Creating the custom tab intent builder and customizing the toolbar\n   val customTabIntentBuilder = CustomTabsIntent.Builder()\n\n   customTabIntentBuilder.apply {\n       setUrlBarHidingEnabled(true)\n   }\n\n   customTabIntent = customTabIntentBuilder.build().intent\n   customTabIntent.apply {\n       // Note the updated base URL \n       data = Uri.parse(\"https://api.transmitsecurity.io/verify/app/\" + [START_TOKEN])\n\n       flags = Intent.FLAG_ACTIVITY_NO_HISTORY and\n               Intent.FLAG_ACTIVITY_NEW_TASK and\n               Intent.FLAG_ACTIVITY_SINGLE_TOP\n   }\n\n   startActivityForResult(customTabIntent, RESULT_CODE_CHROME_TABS)\n</code></pre> Example `WebView` Android implementation (Kotlin):  <pre><code>webView.setWebViewClient(WebViewClient())\n\n// Grant web view video capture permissions\nwebView.webChromeClient = object : WebChromeClient() {\n    override fun onPermissionRequest(request: PermissionRequest) {\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {\n            for (r in request.resources) {\n                if (r == PermissionRequest.RESOURCE_VIDEO_CAPTURE) {\n                    request.grant(arrayOf(PermissionRequest.RESOURCE_VIDEO_CAPTURE))\n                    break\n                }\n            }\n        }\n    }\n}\n\nval webSettings: WebSettings = webView.getSettings()\nwebSettings.javaScriptEnabled = true\nwebSettings.allowFileAccess = false\nwebSettings.mediaPlaybackRequiresUserGesture = false\n// Note the updated base URL\nwebView.loadUrl(\"https://api.transmitsecurity.io/verify/app/\" + [START_TOKEN]) \n</code></pre> Example `ASWebAuthenticationSession` IOS implementation (Swift):  <pre><code>private var authSession: ASWebAuthenticationSession?\n\n@IBAction func startVerification() {\n    let redirectUrl = \"YOUR_REDIRECT_URL\"\n    let startToken = \"START_TOKEN_FROM_CREATE_SESSION\"\n    // Note the updated base URL \n    let verifyUrl = URL(string: \"https://api.transmitsecurity.io/verify/app/\\(startToken)\")!\n    let callBackScheme = URL(string: redirectUrl)!.scheme\n\n    self.authSession = ASWebAuthenticationSession(\n        url: verifyUrl,\n        callbackURLScheme: callBackScheme,\n        completionHandler: { [weak self] (callBack: URL?, error: Error?) in\n            // obtain the `sessionId` and `state` from callBack\n    })\n\n    self.authSession?.presentationContextProvider = self\n    self.authSession?.start()\n}\n\n// MARK: ASWebAuthenticationPresentationContextProviding\n\nfunc presentationAnchor(for session: ASWebAuthenticationSession) -&gt; ASPresentationAnchor {\n    return topMostViewController ?? ASPresentationAnchor()\n} \n</code></pre> <p>After opening the in-app browser, the user will interact with our web app and take the required pictures to complete the session.  </p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#step-3-handle-completion-callback","title":"Step 3: Handle completion callback","text":"<p>When the identity verification process completes, our web app will trigger a redirect to the <code>callback_url</code> value that you specified when you created a session. </p> <p>On Android, that callback URL should point to your app, via deep links or app links. </p> <p>For iOS, you may handle the callback URL directly, using the <code>completionHandler</code> as explained below. If you implement the web experience without using the <code>ASWebAuthenticationSession</code> component, you may handle the callback via universal link. </p> <p>Depending on the operating system and app configuration, you may want to close the in-app browser after receiving the callback. Otherwise, it could still be accessible via the back button. </p> <p>When processing the callback, note the <code>session_id</code> and <code>state</code> params. You\u2019ll need to pass those params to your backend:</p> <ul> <li>Use the <code>state</code> value to validate that the server is familiar with the current session.  </li> <li>Use the <code>session_id</code> value to fetch the session result.  </li> </ul> <p>See the results section (step 5 of the IDV hosted experience guide) and the API reference for more details.  </p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#implementation-notes","title":"Implementation notes","text":""},{"location":"IAM-More-Topics/verify-id-native-vebview/#ios-implementation-notes","title":"IOS implementation notes","text":"<p>Parse the <code>callBack</code> received upon handling (<code>completionHandler</code>) of the <code>ASWebAuthenticationSession</code>. </p> <pre><code>self.authSession = ASWebAuthenticationSession(\n        url: verifyUrl,\n        callbackURLScheme: callBackScheme,\n        completionHandler: { [weak self] (callBack: URL?, error: Error?) in\n            // Next up, obtain the `sessionId` and `state` from the callBack\n})\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#android-implementation-notes","title":"Android implementation notes","text":"<p>Update the Application Manifest to support deep linking, which is required to return to the application once the verification process has been completed. The deep link will correspond to the callback URL defined in your journey configuration. Add this snippet to the Android Application manifest inside the application tag.</p> <pre><code>&lt;activity android:name=\"YourActivity\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n        &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n        &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;\n        &lt;data\n        android:host=\"yourhostname\"\n        android:scheme=\"yourschemename\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> <p>Note</p> <p>You need to replace <code>yourhostname</code> and <code>yourschemename</code> with your host name and scheme. This will result in a deep link that looks like: <code>yourschemename://yourhostname</code>.</p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#android-troubleshooting","title":"Android troubleshooting","text":""},{"location":"IAM-More-Topics/verify-id-native-vebview/#issue-denied-starting-an-intent-without-a-user-gesture","title":"Issue: Denied starting an intent without a user gesture","text":"<p>Android does not let the WebView to start an app intent without an explicit user action.  This happens when the redirect URI has a web protocol (<code>http</code>/<code>https</code>).  Make sure the redirect URI you define is proprietary <code>schema://host</code>. Example: <code>myapp://identity-verification</code></p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#issue-incorrect-redirect-uris","title":"Issue: Incorrect redirect URIs","text":"<p>The console app redirect URI and client-side redirect URI are not the same thing:  </p> <ul> <li>Console app redirect URI should follow the web protocol (<code>http</code>/<code>https</code>).  </li> <li>Client-side redirect URI should be defined as proprietary <code>schema://host</code>, for example, <code>myapp://identity-verification</code>. This should be the same URI that your backend passes as a <code>callback_url</code> in the verification API.</li> </ul> <p> </p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#required-permissions","title":"Required permissions","text":""},{"location":"IAM-More-Topics/verify-id-native-vebview/#android-permissions","title":"Android permissions","text":"<p>The following permissions should be generated for native Android WebView:</p> <ul> <li><code>android.permission.INTERNET</code>: This permission allows the app to access the Internet.</li> <li><code>android.permission.CAMERA</code>: This permission allows the app to use the device's camera.</li> </ul>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#ios-permissions","title":"iOS permissions","text":"<p>Your app requires camera permissions in order to capture the images required for the verification process. Open the <code>Info.plist</code> file as a Property List and add the following key: Privacy - Camera Usage Description. The key value contains an explanation for why the permission is needed, which will be displayed to the user to approve. For example: <code>This is needed to capture images for the verification process</code>.</p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#known-issues-and-troubleshooting","title":"Known issues and troubleshooting","text":""},{"location":"IAM-More-Topics/verify-id-native-vebview/#native-ios-webkit-bug-253186","title":"Native IOS - WebKit Bug 253186","text":"<p>IOS 16.4 - See WebKit Bug 253186 - REGRESSION iOS 16.4 beta selects ultra-wide for facingMode: environment.  </p> <p>16.4 beta selects ultra-wide for <code>facingMode: environment</code>. When the user tries to take a picture of the document, he need to move the device closer or further away to find the ideal focus of the card. By choosing the wide angle camera the user will need to move further away from the document.    </p>"},{"location":"IAM-More-Topics/verify-id-native-vebview/#native-android-webview-chromium-issue-669492","title":"Native Android: Webview Chromium issue 669492","text":"<p>For native android WebView, there is a known bug, which takes the default camera of the device (which is a the wide lens camera) due to some permissions restrictions, that need to be aware of. This bug affects some Android devices. </p> <p>Official name: Issue 669492: Android WebView chromium is giving empty label and kind fields in MediaDeviceInfo, when enumerateDevices() is called. </p> <p>This is an Android bug that can only be resolved by Android. We highly recommend using a solution with custom tabs to avoid this issue. </p>"},{"location":"IAM-More-Topics/verify-id-web-sdk/","title":"IDV: Implement IDV through Web SDK","text":"<p>Using our identity verification (IDV) APIs, you can reliably check your customers' identity against their documents, for example, a driver\u2019s license or a passport. After successful check, you can enable their further transactions, for example, allowing them to open a new bank account online or to pick up a rental car. </p> <p>Follow this guide to integrate Transmit IDV into your website.</p> <p>Note</p> <p>If you use Transmit's hosted identity experience, follow a different guide: Web quick start for a hosted experience. </p>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#how-it-works","title":"How it works","text":"<p>Here's an example of an IDV process. Interaction with Transmit APIs is shown in pink; the table also shows related integration  steps.</p> <p>After initializing the SDK (Step 4), your backend continues by getting an access token (Step 5) and creating a session (Step 6). After this, your client starts a session (Step 7). The SDK executes the verification process with the user using the Transmit identity verification experience. Once all the required images are submitted, Transmit starts processing the verification while the SDK polls for its status. Once processing is completed, the SDK notifies the app (Step 2) so it can obtain the verification result (Step 8).  </p> <p>The diagram below maps the IDV process stages with the required implementation steps:  </p> <p> </p>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-1-configure-your-app","title":"Step 1: Configure your app","text":"<p>To integrate your app with Transmit, you'll need to configure an application in the Admin Portal.  </p> <p>From the Applications page, create an application or use an existing application. Enter the following settings: 1. For Client type , select Web. 2. For Redirect URI , enter your website URL. This is a required field.  </p> <p>Your client ID and client secret for API calls are auto generated upon app creation.  </p>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-2-implement-callback","title":"Step 2: Implement callback","text":"<p>After starting the session (see Step 7: Start session), the verification moves through different events and statuses. For example, the status will indicate if the process was completed successfully so the backend can fetch the verification result. For every change, the SDK will invoke a callback method defined by your application. You need to implement these callback methods.  </p> <pre><code>const sdkCallBacks = {\n  // Notifies when user has started an image capturing session.\n  sessionStarted: ({ sessionId }) =&gt; {},\n\n  // Notifies when user has uploaded an image. \n  imageSubmitted: ({ sessionId }, type) =&gt; {},\n\n  // Notifies when user has finished uploading images and the verification has started.\n  processing: ({ sessionId }) =&gt; {},  \n\n  // Notifies when verification process completed, and the result can be obtained (via backend request).\n  completed: ({ sessionId }) =&gt; {},\n\n  // Notifies when we require re-capturing an image.\n  recapture: ({ sessionId }) =&gt; {},\n\n  // Nofities when an error occurs.\n  error: ({ sessionId }, error) =&gt; {},\n};\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-3-load-sdk","title":"Step 3: Load SDK","text":"<p>To load the SDK, include the following HTML script tag in all the relevant pages of your front-end web application:</p> <pre><code>&lt;script src=\"https://platform-websdk.transmitsecurity.io/platform-websdk/latest/ts-platform-websdk.js\" defer=\"true\" id=\"ts-platform-script\"&gt;&lt;/script&gt;\n</code></pre> <p>Then add the code below to wait for the SDK loading event:</p> <pre><code>document.getElementById('ts-platform-script').addEventListener('load', () =&gt; {\n  // do here things with `tsPlatform`\n});\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-4-initialize-the-sdk","title":"Step 4: Initialize the SDK","text":"<p>Configure the SDK globally for all the modules by calling the SDK's <code>initialize()</code> method, as in the example below:</p> <pre><code>// Configures the SDK with your client ID from Step 1 and initial verification params\nwindow.tsPlatform.initialize({ clientId: [CLIENT_ID], IDV: {\n  serverPath: \"https://api.transmitsecurity.io/verify\", // Use api.eu.transmitsecurity.io for EU clusters\n  consentVersion: \"[CONSENT_VERSION]\", // ID of the consent document approved by the user\n  callbacks: [CALLBACKS], // Callback methods implemented in Step 2\n}});\n</code></pre> <p>Note</p> <ul> <li>The SDK should be initialized only once on each relevant page.</li> <li>The ID of the consent document is stored by Transmit (see User consent for identity verification).</li> <li>By default, the verification UI will be available in English. However, the IDV object supports a <code>language</code> param, which can also be set to <code>pt</code> for Portuguese or <code>es</code> for Spanish.</li> <li>The IDV object supports an optional <code>rootElement</code> string param to specify the ID of a DIV container with the SDK's IDV GUI. If unspecified, the SDK will insert a new DIV container with IDV GUI elements inside the HTML body.  </li> </ul>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-5-get-access-token","title":"Step 5: Get access token","text":"<p>An access token is required to authorize the backend API calls, such as for creating a verification session and obtaining the result. When needed, obtain an access token using the /token request below. See Get client access tokens guide for more information. </p> <pre><code>import fetch from 'node-fetch';\n\nasync function run() {\n  const formData = {\n    client_id: '[CLIENT_ID]', // Replace with client ID obtained in Step 1\n    client_secret: '[CLIENT_SECRET]', // Replace with client secret obtained in Step 1\n    grant_type: 'client_credentials',\n    resource: 'https://verify.identity.security'\n  };\n  const resp = await fetch(\n    `https://api.transmitsecurity.io/oidc/token`, // Use api.eu.transmitsecurity.io for EU clusters\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams(formData).toString()\n    }\n  );\n  const data = await resp.text();\n  // Process the response\n}\nrun();\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-6-create-session","title":"Step 6: Create session","text":"<p>Before your app can initiate the verification process, your backend must create a session in order to provide a secure context for the flow. Create a session by sending a <code>/v1/verification</code> request.</p> <pre><code>import fetch from 'node-fetch';\n\nasync function run() {\n  const resp = await fetch(\n    'https://api.transmitsecurity.io/verify/api/v1/verification', // Use api.eu.transmitsecurity.io for EU clusters\n    {\n      \"method\": \"POST\",\n      \"headers\": {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer &lt;YOUR_JWT_HERE&gt;\" // Replace with access token obtained in Step 3\n      }\n    }\n  );\n  const data = await resp.json();\n  // Process the response\n}\nrun();\n</code></pre> <p>The response contains a <code>start_token</code> that will be used to start the verification on the client side (in Step 7: Start Session), and the <code>session_id</code> required to obtain the verification result.  For example:</p> <pre><code>{\n  \"start_token\": \"ca766ed78c8c0b7824dfea356ed30b72\",\n  \"session_id\": \"H1I12oskjzsdhskj4\",\n  \"expiration\": \"2023-07-18T09:57:46.950Z\",\n  \"missing_images\": [\n    \"document_front\",\n    \"document_back\",\n    \"selfie\"\n  ]\n}\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-7-start-session","title":"Step 7: Start session","text":"<p>Once a session is created, initiate the verification process using the <code>start()</code> SDK method. Add the code below to your app, passing the <code>start_token</code> value returned in the previous step. If successful, the SDK will start a verification process for the user and guide them through the entire identity verification flow using the Transmit experience. Calling this method will add the verification UI to the DOM, allowing the user to start the verification process, and activate a callback method with data indicating the status of the verification (see Step 2: Implement callback). </p> <pre><code>window.tsPlatform.idv.start(startToken);\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-8-get-verification-result","title":"Step 8: Get verification result","text":"<p>Once the verification process starts, your application can track it using the callback methods implemented in step 2.</p> <p>After all the required images are successfully submitted, Transmit automatically starts processing the verification and the SDK starts polling to check the status. If the status is <code>completed</code>, your backend should send the request below to obtain the verification result (see Get verification results API reference):</p> <pre><code>import fetch from 'node-fetch';\n\nasync function run() {\n  const sid = '[SESSION_ID]'; // Replace with session ID returned in Step 7\n  const resp = await fetch(\n    `https://api.transmitsecurity.io/verify/api/v1/verification/${sid}/result`, // Use api.eu.transmitsecurity.io for EU clusters\n    {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer [ACCESS_TOKEN]' // Replace with access token obtained in Step 6\n      }\n    }\n  );\n\n  const data = await resp.text();\n  // Process the response \n}\nrun();\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-9-handle-verification-result","title":"Step 9: Handle verification result","text":"<p>Your service should define the user experience based on the verification result, indicated by the <code>recommendation</code> field:  </p> <ul> <li>If <code>ALLOW</code>: the identity verification process was completed successfully. The response includes user details collected from the document (like their name and birthday), which can be used to enrich the user's profile, and details about the document used to prove their identity.    </li> <li>If <code>CHALLENGE</code>: the identity verification process didn\u2019t succeed, since at least one verification check didn\u2019t pass. The response includes extracted (yet unverified) info and indicates which checks didn't pass and why. This info can be used to review unsuccessful sessions or analyze failed verification attempts. You should proceed as suitable for your use case, typically by initiating a manual review process.  </li> <li>If <code>DENY</code>: the identity verification indicates a high likelihood of attempted fraud. The response includes the extracted (yet unverified) info and indicates which checks didn't pass and why. You should block the user or initiate an in-depth manual review to avoid onboarding a fraudulent user.  </li> </ul> <p>Collected information is arranged inside nested objects: <code>person</code>, <code>document</code>, and <code>additional_info</code>.   </p> <p>Besides the composite verification result, the response provides information about individual checks inside the nested <code>checks</code> object.  </p> Response example for successful ID verification:   <pre><code>{\n  \"session_id\": \"H1I12oskjzsdhskj4\",\n  \"status\": \"complete\",\n  \"recommendation\": \"ALLOW\",\n  \"person\": {\n    \"full_name\": \"Marie Salomea Sk\u0142odowska-Curies\",\n    \"given_name\": \"Marie\",\n    \"surname\": \"Curies\",\n    \"national_id\": \"123ABC\",\n    \"date_of_birth\": \"1867-11-07T00:00:00.000Z\"\n  },\n  \"document\": {\n    \"country\": \"US\",\n    \"region\": \"NY\",\n    \"type\": \"national_id\",\n    \"number\": \"1234567\",\n    \"serial_number\": \"1234567\",\n    \"issue_date\": \"1867-11-07T00:00:00.000Z\",\n    \"expiration_date\": \"1867-11-07T00:00:00.000Z\"\n  },\n  \"additional_info\": {\n    \"address\": {\n      \"country\": \"USA\",\n      \"region\": \"Indiana\",\n      \"city\": \"Indianapolis\",\n      \"street\": \"Snowy Ridge Road\",\n      \"house_number\": \"1234\",\n      \"apartment_number\": \"12\",\n      \"postcode\": \"56789\",\n      \"full_address\": \"1234 Snowy Ridge Road Indianapolis, IN 56789\"\n    },\n    \"national_status\": {\n      \"citizen\": true,\n      \"resident\": true\n    },\n    \"employment\": {\n      \"profession\": \"\"\n    }\n  },\n  \"checks\": {\n    \"document_validation\": {\n      \"recommendation\": \"ALLOW\"\n    },\n    \"document_authentication\": {\n      \"recommendation\": \"ALLOW\"\n    },\n    \"document_liveness\": {\n      \"recommendation\": \"ALLOW\"\n    },\n    \"biometric_matching\": {\n      \"recommendation\": \"ALLOW\"\n    },\n    \"biometric_liveness\": {\n      \"recommendation\": \"ALLOW\"\n    },\n    \"flagged_identity\": {\n      \"recommendation\": \"ALLOW\"\n    },\n    \"risk_recommendation\": {\n      \"recommendation\": \"ALLOW\"\n    }\n  }\n}\n</code></pre> <p>If ID verification fails, the response indicates the reasons behind it. </p> Response example for unsuccessful ID verification:   <pre><code>{\n  \"session_id\": \"string\",\n  \"status\": \"complete\",\n  \"recommendation\": \"DENY\",\n  // EXTRACTED DATA...\n  \"checks\": {\n    \"document_validation\": {\n      \"recommendation\": \"ALLOW\"\n    },\n    \"document_authentication\": {\n      \"recommendation\": \"ALLOW\"\n    },\n    \"document_liveness\": {\n      \"recommendation\": \"DENY\",\n      \"reasons\": [ \"presentation_attack\" ]\n    },\n    \"biometric_matching\": {\n      \"recommendation\": \"CHALLENGE\",\n      \"reasons\": [ \"biometric_mismatch\" ]\n    },\n    \"biometric_liveness\": {\n      \"recommendation\": \"DENY\", \n      \"reasons\": [ \"mask detected\" ]\n    },\n    \"flagged_identity\": {\n      \"recommendation\": \"DENY\",\n      \"reasons\": [ \"multiple_same_identity_attempts\" ]\n    },\n    \"risk_recommendation\": {\n      \"recommendation\": \"DENY\",\n      \"reasons\": [ \"action_is_suspected_fraud\" ]\n    }\n  }\n}\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#step-10-recapture-the-images","title":"Step 10: Recapture the images","text":"<p>Recapture the required images in case the recapture status is returned. For example, if some data can't be extracted because of poor image quality. User will return to the beginning of the flow and go through the verification process again. Data regarding their stage will be delegated to a callback method.</p> <pre><code>window.tsPlatform.idv.recapture(sessionId);\n</code></pre>"},{"location":"IAM-More-Topics/verify-id-web-sdk/#example-html-implementation","title":"Example HTML implementation","text":"<pre><code>&lt;html&gt;\n\n&lt;head&gt;\n  &lt;title&gt;IDV Demo&lt;/title&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;/head&gt;\n\n&lt;body style=\"margin: 0;\"&gt;\n  &lt;button id=\"start-verification\"&gt;start&lt;/button&gt;\n  &lt;script src=\"https://platform-websdk.transmitsecurity.io/platform-websdk/latest/ts-platform-websdk.js\" defer=\"true\"\n    id=\"ts-platform-script\"&gt;&lt;/script&gt;\n  &lt;script&gt;\n    const sdkCallBacks = {\n      sessionStarted: ({ sessionId }) =&gt; {},\n      imageSubmitted: ({ sessionId }, type) =&gt; {},\n      processing: ({ sessionId }) =&gt; {},\n      completed: ({ sessionId }) =&gt; {},\n      recapture: ({ sessionId }) =&gt; {},\n      error: ({ sessionId }, error) =&gt; {},\n    };\n\n    document.getElementById('ts-platform-script').addEventListener('load', () =&gt; {\n      const sdkInit = {\n        clientId: 'abcdefg',\n        IDV: {\n          consentVersion: '123456',\n          serverPath: 'http://localhost:3030/verify',\n          language: 'en',\n          rootEelement: 'sdk-root-container',\n          callback: sdkCallBacks,\n        },\n      };\n      window.tsPlatform.initialize(sdkInit);\n    });\n\n    document.getElementById(\"start-verification\").addEventListener(\"click\", (event) =&gt; {\n      window.tsPlatform.idv.start(jsonRes.startToken)\n    });\n\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"IAM-More-Topics/integrations/stream-log-data/","title":"About log streaming","text":"<p>Our platform enables you to feed audit Logs into your SIEM (Security information and event management) or other log collection systems. This includes the following data: - Admin activities  - User activities </p>"},{"location":"IAM-More-Topics/integrations/stream-log-data/#integration-options","title":"Integration options","text":"<p>To feed audit logs into your systems, you can take advantage of the following: </p> <ul> <li>API polling techniques</li> <li>Prebuilt plugins for third-party systems:  <ul> <li>Audit log connector for Splunk </li> <li>More plugins under development  </li> </ul> </li> </ul> <p>Prebuilt plugins are normally better optimized for our platform and the consumers. </p>"},{"location":"IAM-More-Topics/integrations/stream-log-data/#prebuilt-plugins","title":"Prebuilt plugins","text":"<p>There are multiple patterns a plugin can use to share data with target systems: API polling, pub/sub, and so on. No matter which pattern is implemented, a prebuilt plugin is easier to set up and configure than starting from scratch.  </p> <p>To feed data into Splunk, use Security Events Plugin. </p> <p>More plugins are on the way, so check back soon.  </p>"},{"location":"IAM-More-Topics/integrations/stream-log-data/#api-polling","title":"API polling","text":"<p>You can set up a cron job or a custom scheduler and query Audit Logs API at specified intervals. When configuring the batch size and polling interval, think about the activity level on the portal. Consider setting a longer polling period for low activity levels and a shorter polling period for higher activity levels. </p> <p>Keep in mind that determining the right batch size and polling interval for your organization may require some trial and error.  </p> <p>Learn more</p> <ul> <li>Feed audit logs to Splunk</li> </ul>"},{"location":"IAM-More-Topics/integrations/stream-splunk/","title":"Feed audit logs to Splunk","text":"<p>You can feed data to Splunk via Transmit Security Events Add-on . This plugin will help you keep track of user and admin activity by polling Audit Logs API.   </p>"},{"location":"IAM-More-Topics/integrations/stream-splunk/#step-1-configure-a-management-app","title":"Step 1: Configure a management app","text":"<p>In your Transmit Security tenant, configure a management app. Give the app a suitable name, for example, <code>MySplunkLogStream</code>.  </p> <p> </p> <p>Note</p> <p>After saving the management app, open it again and note the Client ID and Client Secret values. You\u2019ll need these parameters to install the Splunk App.  </p>"},{"location":"IAM-More-Topics/integrations/stream-splunk/#step-2-install-the-plugin","title":"Step 2: Install the plugin","text":"<p>You have the following options:  </p> <ul> <li>Install the plugin directly from Splunk portal. This option supports both Splunk Enterprise and Splunk Cloud environments.  </li> <li>Download the plugin and install it manually. This option only supports Splunk Enterprise environments and doesn't work for Splunk Cloud users. </li> </ul> <p>To install the plugin from Splunk portal:  </p> <ol> <li>While logged in, go to Apps &gt; Manage Apps, then click Browse more apps: </li> <li>Search for Transmit Security Events Add-on: </li> <li>Click Install on the Transmit Security Events Add-on tile. </li> <li>Log in with your Splunk username and password:   </li> <li>Restart Splunk.  </li> </ol> <p>To install the plugin manually (only in Splunk Enterprise environments): </p> <ol> <li>Download Transmit Security Audit Log Connector for Splunk. </li> <li>On Splunk portal, go to Apps &gt; Manage Apps:  </li> <li>Click Install App from File:   </li> <li>Upload the file you've downloaded from Splunkbase: </li> </ol> <p>After installation, the browser redirects you to the Apps page. This page now shows Transmit Security on the app list. </p>"},{"location":"IAM-More-Topics/integrations/stream-splunk/#step-3-configure-the-inputs","title":"Step 3: Configure the inputs","text":"<p>Now you need to launch the app and configure the following inputs:  - Inputs for User Activity (logins, etc.)  - Inputs for administrative audit logs: application created, group created, and so on</p> <p>To configure the inputs: </p> <ol> <li>Launch the app from the Apps page.  </li> <li>Click Create New Input:   </li> <li>Configure and update the User Activity inputs: <ul> <li>Name: Give the input a meaningful name, for example, <code>Transmit_User_Events</code>.  </li> <li>Interval: Enter polling interval in seconds.  </li> <li>Index: Use your preferred index; for example, you can choose <code>default</code> or <code>main</code>.</li> <li>OAuth Endpoint: Token exchange endpoint: <code>https://api.transmitsecurity.io/oidc/token</code> (<code>api.eu.transmitsecurity.io</code> for the EU and <code>api.ca.transmitsecurity.io</code> for Canada).  </li> <li>Endpoint -  Use the following value: <code>https://activities.transmitsecurity.io/v1/activities/user</code> (<code>activities-query-service.identity.security</code> for the EU and <code>activities.ca.transmitsecurity.io</code> for Canada). </li> <li>Client ID and Client Secret: Use the values from the Management App you've created in the Transmit portal earlier. </li> </ul> </li> <li>Repeat step 3 for the Admin Activity inputs. Use the endpoint <code>https://activities.transmitsecurity.io/v1/activities/admin</code> (update the base URL for EU / CA), and the same Client ID / Client Secret values as in step 3.  </li> </ol> <p>Note</p> <p>When defining the polling interval, consider the level of activity on the platform. For instance, you may want to use a longer polling interval, like <code>3600</code> (1 hour), for low traffic or a shorter interval, like <code>300</code> (5 minutes), for high-traffic situations.  </p>"},{"location":"IAM-More-Topics/integrations/stream-splunk/#step-4-check-the-operation","title":"Step 4. Check the operation","text":"<p>Check how the connector works using the Search app. Include <code>sourcetype=transmit</code> in the search bar. If the search isn't working, restart Splunk. </p> <p> </p>"},{"location":"Other-Topics/","title":"In this section","text":"<p>These section includes the following web documentation examples: </p> <ul> <li>Personalize the application </li> <li>More to come...  </li> </ul>"},{"location":"Other-Topics/overview/","title":"Technical security overview","text":"<p>You take the information security seriously and don\u2019t want your service to be compromised. Meanwhile, your organization tries to strike a balance between the business objectives and the users\u2019 preferences, while meeting the targets in confidentiality, integrity, and authenticity.</p> <p>If you have a mobile app, your users' actions need to be authorized and accounted for. Evidently, a single factor authentication is not enough, but developing multi-factor authentication (MFA) in house and ensuring a smooth user experience at the same time is a tall order.</p> <p>Our mobile SDK enables your business to authenticate the customers and workforce personnel using a mobile device and all supported verification methods. Moreover, you can complement the authentication with mobile threat detection (for example, detect jailbroken or rooted devices) and have the option to manage the user devices via the device management portal.</p> <p>This document aims to explain how our mobile SDK can help you reduce the attack surface and manage security risks. </p>"},{"location":"Other-Topics/overview/#functionality","title":"Functionality","text":"<p>The mobile SDK enables you to orchestrate web and mobile user authentication journeys, manage the device authenticators and collect related user and device data for risk analysis and machine learning.</p> <p>The mobile SDK provides the following authentication methods for mobile and cross-channel scenarios:</p> SDK hosted methods Other authenticators IAM Biometrics  IAM Device Ownership  IAM Pin  IAM Behavioral Pin  IAM Path  IAM Behavioral Path  IAM Soft Tokens SMS One Time Password (OTP)  Email OTP  Temporary Access Codes (TACs)  Hardware Token OTP  Externally Managed Authenticators <p>You can use the mobile SDK to authenticate users on other channels where the platform has initiated a logon via Radius, SAML, or OIDC.  </p> <p>In addition to this, the mobile SDK can be used in combination with our Web Intelligence SDK, helping you correlate anomalies from the web and the mobile channels. The mobile SDK is available for iOS (ObjectiveC, Swift) and for Android (Java and Kotlin). Likewise, we provide multiple reference applications and comprehensive SDK documentation.</p> <p>We\u2019ve coded the cryptographic operations in C only, out of security concerns (e.g. memory management) and for performance reasons.  </p>"},{"location":"Other-Topics/overview/#our-approaches","title":"Our approaches","text":"<p>Your mobile app is likely to handle important data, with user identities high on the sensitivity scale. And as we take the security of your information seriously, we implemented a comprehensive security program which includes the following:</p> <ul> <li>Building a strong security architecture and implementing an in-depth defense</li> <li>Aligning the organization on information security best practices</li> <li>Training all personnel in security topics</li> </ul>"},{"location":"Other-Topics/overview/#security-architecture","title":"Security architecture","text":"<p>We provide a secure service architecture through a combination of organizational and technical measures.</p> <p>When it comes to the organization and the processes:  </p> <ol> <li>All personnel are trained in the information security practices.</li> <li>We employ dedicated NOC and SOC teams who ensure a secure 24 / 7 service operation.</li> <li>We employ an internal red team, as well as external rotated pen testers and bug bounty hunters.</li> <li>We have a dedicated team of cryptography engineers.</li> <li>We are certified for ISO 27001 and SOC 2 (Type 2) compliance.</li> </ol> <p>When it comes to the technology:  </p> <ol> <li>The SDK has a root of trust process allowing it to establish a secure channel</li> <li>The SDK always protects data in-transit and at-rest.</li> <li>The SDK has a set of pre-defined checks that:  <ul> <li>ensure that the SDK is running in an adequately secure environment;</li> <li>provide data collection capabilities that enable additional security controls.</li> </ul> </li> </ol>"},{"location":"Other-Topics/overview/#root-of-trust-process","title":"Root of Trust process","text":"<p>Callsign provides an additional layer of encryption on top of TLS; we refer this to as a secure channel. This secure channel must be established at SDK initialization and therefore the SDK can be initialized over an insecure channel.</p> <p>To ensure the connection is secure, the mobile SDK provides a Root of Trust that is similar to CA certificates. This ensures that the mobile SDK is communicating with the same Callsign server as expected. </p> <p>First, the mobile SDK performs TLS pinning. You can specify your own certificate pinning hashes for on-premise deployments or use Callsign\u2019s certificate hashes for SaaS deployments at SDK initialization. The certificate pinning ensures that the server we connect over TLS is indeed the expected one, mitigating any man-in-the-middle (MITM) threats.</p> <p>Then, we use an embedded ED25519 public key on the mobile device to verify the platform\u2019s response signature when performing a key exchange to establish the secure channel. Here, only a server with the private key associated with the embedded public key can sign a genuine response, assuring that we performed the key exchange with the correct server.</p>"},{"location":"Other-Topics/overview/#data-in-transit-security","title":"Data-in-transit security","text":"<p>The data-in-transit is always protected through an additional layer on top of the TLS. </p> <p>The diagram below shows the methods you need to implement in your app, as well as the encryption measures implemented at our end for secure data transmission: </p> <p></p> <p>As a result of the above process, the SDK establishes a secure channel between your mobile app  and the Callsign platform.  </p> <p>On the network level, we ensure the data security through a strong perimeter around the platform components, protected mobile gateways, and use of battle-proven algorithms such as AES 256 GCM.</p>"},{"location":"Other-Topics/overview/#data-at-rest-security","title":"Data-at-rest security","text":"<p>We protect the mobile SDK\u2019s data at rest through strong encryption in the device\u2019s secure storage area, the iOS Secure Enclave or Android Secure Element. The secure storage area may be backed by a trusted execution environment (TEE) that provides additional layers of security to prevent unauthorized access or tampering of the data.  </p>"},{"location":"Other-Topics/overview/#runtime-security-controls","title":"Runtime security controls","text":"<p>We\u2019ve developed a toolset of safeguards and mitigations for a smoother day-to-day operation of the services, contributing to your service\u2019s overall runtime security. You can find some of these safeguards and mitigations in the table below:</p> Issue type Safeguards / mitigations Notes Device compromise Root / jailbreak detection, debugger detection, location spoofer detection, Man-in-the-middle (MITM) protection For example, the mobile SDK initiates a secure connection with the platform using Diffie-Hellmann key exchange to mitigate the MITM threat. SDK compromise Swizzle protection, hooking protection, tamper protection, resource modification protection, anti-cloning protection The SDK only detects threats against the SDK itself and provide protection to the mobile host application. User compromise Behavioral replay detection, tap-jacking protection, screen-sharing protection, emulator detection."},{"location":"Other-Topics/overview/#conclusion","title":"Conclusion","text":"<p>Callsign provides many more security features than described on this page. For further details on how our security measures may help you, contact your client account manager.</p>"},{"location":"Other-Topics/personalize-app/","title":"Personalize the application","text":"<p>Note</p> <p>I originally wrote this document as a test before starting working with a company. </p> <p>XYZ White Label App (the app) enables your end users to {do something} offering {value statement}.  While we deliver the app with all requested functionality, the app comes with default appearance. Therefore, we advise you to update the UI styles and the logo before publishing the app on Google Play and in App Store.  </p>"},{"location":"Other-Topics/personalize-app/#how-it-works","title":"How it works","text":"<p>The app's appearance is defined in a JSON stylesheet file, located in the project folder at: <code>assets/stylesheet.json</code>. The same file will be stored locally in your mobile app.  </p> <p>As an engineer responsible for personalizing the app, your tasks involves updating the stylesheet. Proficiency in JSON data format is necessary for this task, and knowledge of HTML/CSS is also beneficial due to the similarity in style matching logic.  </p>"},{"location":"Other-Topics/personalize-app/#how-the-app-defines-the-styles","title":"How the app defines the styles","text":"<p>The app's user interface is defined in the view files located in the <code>assets/views</code> folder. Each element is identified by two or more tags. The array often begins with the element type and context or location:  </p> <pre><code>[\"button\", \"login-screen\", \"signup-button\"]\n</code></pre> <p>The app searches within the stylesheet and selects a set of styles that match the provided tags.</p> <p>Here is an example of a single ruleset (set of styles):</p> <pre><code>{\n    \"styles\": [\n        {\n            \"rule\": {\n                \"tags\": [ \"button\", \"login-screen\", \"signup-button\"]\n            },\n            \"properties\": {\n                \"backgroundColor\": { \"hex\": \"#00dddd\" },\n                \"tintColor\": { \"hex\": \"#ffffff\" },\n                \"font\":  { \"fontWeight\": \"400\" }\n            }\n        }\n    ]\n}\n</code></pre> <p>Once the app has gathered the entire selection of styles, it proceeds to render the current page.  </p>"},{"location":"Other-Topics/personalize-app/#updating-the-styles-and-the-logo","title":"Updating the styles and the logo","text":"<p>As an app engineer, you have the ability to modify the stylesheet thereby ensuring that the app renders updated styles. </p> <pre><code> -------                         -------------\n|       |   getStyles([tags])   |             |\n|       | --------------------&gt; | stylesheet. |\n|  App  | &lt;-------------------- |    json     |\n|       |  style properties     |             |\n -------                         -------------    \n                                     ^\n                                     |\n   ( )                               |\n  -----                              |\n    |    ---------------------------- \n   / \\      update the stylesheet\n  Admin\n</code></pre> <p>After making changes to the stylesheet, you should rebuild the app and publish it on Google Play and in Apple Store.  </p> <p>Learn how to use the stylesheet:</p> <ul> <li>Structure </li> <li>Matching logic </li> <li>Example</li> </ul>"},{"location":"Other-Topics/personalize-app/stylesheet-spec/","title":"Stylesheet specification","text":"<p>Note</p> <p>Example spec using Stoplight (free tier): Stoplight example.  </p>"},{"location":"Other-Topics/personalize-app/stylesheet-spec/#structure","title":"Structure","text":"<p>The top level structure of the stylesheet is as follows:  </p> <pre><code>{\n    \"styles\": [styleObject1, styleObject2,...],\n    \"values\": [variable1, variable2,...]\n}\n</code></pre> <p>The top level properties of the stylesheet are outlined below: </p> KEY DATA TYPE DESCRIPTION COMMENTS <code>styles</code> Array An array of ruleset objects that define the styles for all elements across application screens. Each ruleset within an array must have a unique combination of tags. <code>values</code> Object The object that provides style variables, functioning similarly to CSS variables (MDN). The <code>values</code> object is not required, if the stylesheet doesn't use any variables."},{"location":"Other-Topics/personalize-app/stylesheet-spec/#ruleset-objects","title":"Ruleset objects","text":"<p>Here is an example of a ruleset:</p> <pre><code>{\n    \"rule\": {\n        \"tags\": [ \"list-item\", \"hover\" ]\n    },\n    \"properties\": {\n        \"backgroundColor\": { \"hex\": \"#00dddd\" },\n        \"tintColor\": { \"hex\": \"#ffffff\" },\n        \"font\": { \"fontWeight\": \"400\" }\n    }\n}\n</code></pre> <p>A ruleset includes the following data: </p> KEY DATA TYPE DESCRIPTION COMMENTS <code>rule</code> Object Contains a nested <code>tags</code> array. <code>tags</code> Array An array of style tags (string values). It can include tags for the element type, context or location, element state, and more. The array of tags functions similarly to CSS class selectors (MDN). <code>properties</code> Object The app renders the elements using the properties for the matching <code>tags</code> array. <p>To specify properties, follow this pattern: <pre><code>\"properties\": {\n    property1: {subtype1: value1},\n    property2: {subtype2: value2}\n}\n</code></pre></p> <p>To reuse properties, utilize style variables. </p> <p>The available properties depend on the element type. Refer to List of available properties for more information. </p>"},{"location":"Other-Topics/personalize-app/stylesheet-spec/#variables","title":"Variables","text":"<p>Style variables can be reused throughout the <code>styles</code> section. These variables are defined within the <code>values</code> object.</p> <p>To specify variables, follow this pattern:  <pre><code>\"values\": {\n    variableName: { subtype: value },\n    ....\n}\n</code></pre></p> <p>Here is an example of a <code>values</code> section: </p> <pre><code>\"values\": {\n    \"primary_color\": { \"hex\": \"#00dd00\" },\n    \"secondary_color\": { \"hex\": \"#ffdd00\" }\n}\n</code></pre>"},{"location":"Other-Topics/personalize-app/stylesheet-spec/#style-matching","title":"Style matching","text":"<p>We illustrate this section using the following example rulesets:</p> <pre><code>{\n    // Ruleset 1\n    \"rule\": {\n        \"tags\": [ \"button\" ]\n    },\n    \"properties\": {\n        \"backgroundColor\": { \"hex\": \"#00dddd\" },\n        \"tintColor\": { \"hex\": \"#ffffff\" }\n    }\n},\n{\n    // Ruleset 2\n    \"rule\": {\n        \"tags\": [ \"button\", \"login-screen\" ]\n    },\n    \"properties\": {\n        \"backgroundColor\": { \"hex\": \"#0000ff\" }, \n        \"font\": {\"fontWeight\": \"40px\" }\n    }\n},\n{\n    // Ruleset 3\n    \"rule\": {\n        \"tags\": [ \"button\", \"signin-button\" ]\n    },\n    \"properties\": {\n        \"font\": {\"fontWeight\": \"50px\" }\n    }\n}\n</code></pre> <p>The example element matches each ruleset (includes all tags from each ruleset):  </p> <pre><code>[\"button\", \"login-screen\", \"signin-button\"] \n</code></pre> <p>The style matching principles are outlined below:</p> PRINCIPLE DESCRIPTION EXAMPLE Aggregate the properties. An element aggregates properties from all matching rulesets. As the element matches all example rulesets, it will have all properties: <code>backgroundColor</code>, <code>tintColor</code>, and <code>font</code>. Count the tags. If multiple ruleset matches contain the same property (different values), the match with more tags prevails. Rulesets 1 and 2 have the same property: <code>backgroundColor</code>, but ruleset 2 includes more tags. Therefore, the element will use the property from ruleset 2: (<code>\"backgroundColor\": { \"hex\": \"#0000ff\" }</code>). The order matters. If an element matches multiple rulesets with the same number of tags, the last declared ruleset is applied. Rulesets 2 and 3 include the same property (<code>font</code>) and the same number of tags (two). In this case, the last declared matching ruleset is applied (<code>\"font\": {\"fontWeight\": \"50px\"}</code>)."},{"location":"Other-Topics/personalize-app/stylesheet-spec/#stylesheet-example","title":"Stylesheet example","text":"<p>Simplified stylesheet example: </p> <pre><code>{\n    // All styles must be specified inside the 'styles' object\n    \"styles\": [\n        {  \n            // An example ruleset may include one or more tag values (string). \n            \"rule\": {\n                // All tags must match the element for the ruleset to be applied. \n                \"tags\": [ \"list-item\", \"info-screen\" ]\n            },\n            // If an element matches all tags from a ruleset, the app applies specified properties. \n            \"properties\": {\n                \"backgroundColor\": { \"hex\": \"#00dddd\" },\n                \"tintColor\": { \"hex\": \"#ffffff\" }\n            }\n        },\n        {\n            \"rule\": {\n                \"tags\": [ \"list-item\", \"hover\" ]\n            },\n            \"properties\": {\n                // The subtype 'ref' indicates a style variable. \n                \"backgroundColor\": { \"ref\": \"primary_color\" }\n            }\n        },\n\n        {\n            // This is how images are specified. Use the same format to update the app's logo. \n\n            \"rule\": {\n                \"tags\": [ \"control-StylableProgressBar\" ]\n            },\n            \"properties\": {\n                \"imageUrl\": \"file://c:/spinner-test4.gif\"\n            }\n        }\n    ],\n    // Reusable values (variables)\n    \"values\": {\n        // Variable name\n        \"primary_color\": {\n            // Scale / subtype and the value\n            \"hex\": \"#00dd00\"\n        },\n        \"secondary_color\": {\n            \"hex\": \"#ffdd00\"\n        }\n    }\n}\n</code></pre>"},{"location":"To-Be-Migrated/introduction/","title":"API documentation","text":"<p>Note</p> <p>The content in this section is not yet fully migrated.  You can check the original documentation (Github). </p>"},{"location":"To-Be-Migrated/introduction/#overview","title":"Overview","text":"<p>Breach Report monitors the internet for information about data breaches. As of August 2020, the compiled database provides records for 14B+ compromised user accounts. Your applications can access this information via Breach Report API.</p> <p>The main purpose of this repository is to let you know about Breach Report API and to collect your feedback.</p>"},{"location":"To-Be-Migrated/introduction/#getting-started","title":"Getting started","text":"<p>Before using Breach Report API, make sure you've registered at Breach Report portal so you can get and use the unique API key.</p> <p>When you use Breach Report API, include the key in the request header.</p>"},{"location":"To-Be-Migrated/introduction/#contacts","title":"Contacts","text":"<p>We look forward to hearing from you.</p> <p>If you need help integrating your application with Breach Report API or need additional information, feel free to contact us on:</p> <ul> <li>LinkedIn</li> <li>Facebook</li> <li>Twitter</li> </ul> <p>Or email us at support@breachreport.com.</p> <p>If you want to report a security issue, include the word \"security\" in the subject field. We take all security issues very seriously!</p> <p>We hope that you enjoy using Breach Report API and that the integration goes smoothly!</p>"},{"location":"To-Be-Migrated/introduction/#testing-breach-report-api","title":"Testing Breach Report API","text":"<p>Breach Report API can be tested using various automation tools.</p> <p>The following parameters can be specified via the test environment.</p> PARAMETER VALUE COMMENTS BASE_URL <code>https://breachreport.com</code> API_KEY <code>your-secret-key</code> See Getting the API key for the details. <p>Contact the technical support for the additional API aids (request schemas, etc).</p>"},{"location":"To-Be-Migrated/introduction/#how-to-use-breach-report-api","title":"How to use Breach Report API","text":"<p>For detailed information on how to use the API, see the following pages:</p> <ul> <li>Before Using Breach Report API</li> <li>Checking Email Addresses and Domains</li> <li>Registering Email Addresses and Domains</li> <li>Monitoring Email Addresses and Domains</li> <li>Getting Notifications</li> </ul>"},{"location":"To-Be-Migrated/introduction/#contributing-to-the-project","title":"Contributing to the project","text":"<p>You can contribute to the project by creating a Breach Report account and getting a paid subscription or by reporting technical issues to the technical support at support@breachreport.com.</p>"},{"location":"To-Be-Migrated/introduction/#subscription-plans","title":"Subscription plans","text":"<p>Breach Report provides several Business and Enterprise subscription plans.</p> <p>For information about the current subscription opportunities, see Billing and Payments on the Breach Report portal.</p> <p>The subscription plans may have limitations for the number of domains to track and number of available API calls. To remove the current limitations, you may need to upgrade your existing BR account.</p> <p>For further information, contact the product support at support@breachreport.com.</p>"},{"location":"To-Be-Migrated/guides/01-before-using-api/","title":"Before using the API","text":"<p>Using the API requires initial preparation.  </p>"},{"location":"To-Be-Migrated/guides/01-before-using-api/#things-you-must-know-first","title":"Things you must know first","text":"<p>Your application must authenticate all calls to Breach Report API using the API key. To get the API key, register on the Breach Report portal.</p> <p>To check the email addresses for breaches, you have the following options:</p> <ul> <li>Search information by the plaintext email address</li> <li>Search information by a SHA256 password hash</li> <li>Add the email address to the account and search information by Email ID</li> </ul> <p>To check a web domain for compromised email addresses, add the domain to the account and search information by Domain ID.</p> <p>For greater security, Breach Report API provides detailed information to proven account holders only.</p> <p>To get the detailed information about an email address:</p> <ol> <li>Add the email address to the account.</li> <li>Verify the account ownership by email.</li> <li>Search the information by email ID.</li> </ol> <p>To run the domain queries:</p> <ol> <li>Add the domain to the account.</li> <li>The Portal will generate a TXT record value. Add this value as a TXT entry to the domain registration records.</li> <li>Search the information by domain ID.</li> </ol>"},{"location":"To-Be-Migrated/guides/01-before-using-api/#register-on-the-portal","title":"Register on the portal","text":"<p>Before getting the API key, register on the Breach Report portal:</p> <ol> <li>Go to the signup page.</li> <li>Enter your credentials and click Sign Up.</li> <li>Confirm your account by using the link in the confirmation email.</li> <li>After signing up, you can log in and generate the API key identifier.</li> </ol>"},{"location":"To-Be-Migrated/guides/01-before-using-api/#get-the-api-key","title":"Get the API key","text":"<p>To get the API key:</p> <ol> <li>Login in on the portal.</li> <li>Open the API section.</li> <li>Click Create Key.</li> </ol> <p>The page now displays the API key you've generated.</p>"},{"location":"To-Be-Migrated/guides/01-before-using-api/#add-an-email-address","title":"Add an Email Address","text":"<p>Registering at Breach Report portal automatically adds the registration email address to your account.</p> <p>You can add more email addresses to your account via the portal or by using the API.</p> <p>To add an email address via the portal:</p> <ol> <li>Login in on the portal.</li> <li>Open the Email Accounts section.</li> <li>Enter the email address in the Add Email field.</li> <li>Confirm the action by pressing Enter or by clicking the [+] button.</li> </ol> <p></p> <p>Or you can register an email address via the API.</p>"},{"location":"To-Be-Migrated/guides/01-before-using-api/#verify-an-email-address","title":"Verify an email address","text":"<p>Adding an email address to the account (via the portal or by email) automatically sends a confirmation request to the specified email address.</p> <p>Once you've added an email address via the portal, a message is displayed in the bottom portion of the page.</p> <p></p> <p>To verify an email address, open the confirmation request message and verify it by clicking the confirmation link.</p>"},{"location":"To-Be-Migrated/guides/01-before-using-api/#add-a-domain","title":"Add a domain","text":"<p>You can add domains to your account via the portal or by using the API.</p> <p>To add an email address via the portal:</p> <ol> <li>Login in on the portal.</li> <li>Open the Domains section.</li> <li>Enter the email address in the Add Domain field.</li> <li>Confirm the operation by pressing Enter or by clicking the [+] button.</li> </ol> <p></p> <p>The registered domain is now displayed on the page.</p> <p>Alternatively, you can register the domain via the API.</p>"},{"location":"To-Be-Migrated/guides/01-before-using-api/#verifying-a-domain","title":"Verifying a domain","text":"<p>Verifying a domain requires adding a TXT record to the domain with the value you can get on the portal.</p> <p>To add a TXT record to the domain:</p> <p>Get the domain verification code. You can use the value that was returned by the Add a Domain Name API call. Or do the following steps:</p> <ol> <li>Login in on the portal.</li> <li>Open the Domains section.</li> <li>Click TXT for the domain to verify. This copies the text you need to add to your domain records.  </li> </ol> <p>Now, add a TXT record:</p> <ol> <li>Go to your domain registrar's portal.</li> <li>Follow the domain registrar's instruction for adding a TXT record.</li> </ol> <p>Breach Report API will check the domain registration records, and it will change the domain status when it sees the updated records.</p>"},{"location":"To-Be-Migrated/guides/01-before-using-api/#http-response-codes","title":"HTTP response codes","text":"<p>With Breach Report API, you may get the following HTTP response codes.</p> Code Name Description 200 OK Request successfully fulfilled. Everything worked as expected. 400 Bad Request Invalid domain URL or an invalid key. Check the API key on the portal section. 402 Payment required You may need to upgrade your subscription. For further information, visit the Subscription page on the portal page. 409 Conflict The domain name or the email address was registered before. Check your account for existing domains / emails. 500 Internal server error Internal server error occured. If this issue persists, contact the support service."},{"location":"To-Be-Migrated/guides/02-check-email-domains/","title":"Check domains and email addresses","text":"<p>Breach Report API enables the user to check email addresses for data breach incidents by providing the following calls:</p> <ul> <li>Check a plaintext email address</li> <li>Check a hashed email address</li> <li>Check a web domain for compromised email addresses</li> </ul>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#check-a-plaintext-email-address","title":"Check a plaintext email address","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email/check</code></p> <p>Request method: <code>POST</code> </p> <p>This API call accepts a plaintext email address and checks it for known data breaches.</p> <p>Alternatively, you may check an email address by using a hashed email address (recommended method).</p> <p>This API call returns:</p> <ul> <li>Incident count for unverified emails.</li> <li>Incident count and details for verified emails.</li> </ul> <p>Verified email addresses are those that are confirmed by the API users via their email addresses.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the email address in the request body.</li> </ol>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#request-parameters","title":"Request parameters","text":"Name Type Description <code>api-key</code> string The key you can generate on the portal. Must be included in the request header. <code>email</code> string Email address to be checked."},{"location":"To-Be-Migrated/guides/02-check-email-domains/#code-examples","title":"Code Examples","text":"Shell command example <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/email/check' \\\n--header 'api-key: {{API_KEY}}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'email=test@test.com'\n</code></pre> JavaScript code example <pre><code>//Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\nvar urlencoded = new URLSearchParams();\nurlencoded.append(\"email\", \"test@test.com\");\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: urlencoded,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/enterprise/v1/email/check\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email/check\"\npayload = 'email=test@test.com'\nheaders = {\n  'api-key': '{{API_KEY}}',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example <pre><code># Sample Ruby code\nrequire \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/email/check\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest.body = \"email=test@test.com\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#response-examples","title":"Response Examples","text":"Verified email address: Found breaches <p><pre><code>{\n  \"email\": \"john.smith@example.com\",\n  \"records\": 36,\n  \"isAssigned\": false,\n  \"breaches\": [\n    {\n      \"breachId\": 6800,\n      \"title\": \"BigDB Breach\",\n      \"createdAt\": \"2019-03-06T14:22:21.579Z\",\n      \"compromisedAccounts\": 2680349475,\n      \"breachYear\": 2019,\n      \"breachMonth\": 0,\n      \"breachDay\": 7,\n      \"url\": \"\",\n      \"logo\": \"https://crm.breachreport.com/images/uploads/O4ts7dil8JYI_Joq.svg\",\n      \"description\": \"On January 7th 2019 a 595 GB packed database named \\\"BigDB\\\" was leaked on the internet. Some emails can be found multiple times, as the dump aggregated 252 previous breaches, such as Anti Public and Exploit.in, and decrypted passwords of the known sites such as LinkedIn, Bitcoin and Pastebin.\",\n      \"breachDataTypes\": [\n        \"password\",\n        \"email\",\n        \"plaintext password\"\n      ]\n    }\n  ]\n}\n</code></pre> Where:  <code>email</code> (string): The email address.   <code>records</code> (integer): Incident count for the email address.   <code>isAssigned</code> (boolean): Indicator of whether the email is address is assigned to a domain: <code>true</code> or <code>false</code>.   <code>breaches</code>: List / array of data breach incidents and their description.   <code>breachId</code> (integer): The ID of the incident in the Breach Report Database.   <code>title</code> (string): The title of the incident in the Breach Report Database.   <code>createdAt</code> (string): The date the incident was added to the Breach Report Database.   <code>compromisedAccounts</code> (integer): The total number of compromised accounts.   <code>breachYear</code> (integer): Year the incident occured.   <code>breachMonth</code> (integer): Month of the incident.   <code>breachDay</code> (integer): Day of the incident.   <code>url</code> (string): The URL to the sources of the incident.   <code>logo</code> (string): The logo of the incident.   <code>description</code> (string): Text description of the incident.   <code>breachDataTypes</code>: List / array of exposed credential types in the incident.  </p> Unverified email address: No breaches   For unverified email addresses, the API return number of breaches only (`0` if none).   <pre><code>{\n    \"email\": \"test@example.com\",\n    \"records\": 0,\n    \"isAssigned\": false,\n    \"breaches\": 0\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#check-a-hashed-email-address","title":"Check a hashed email address","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email-hash/check</code></p> <p>Request method: <code>POST</code></p> <p>This API call accepts a SHA256-hash email address value. This is the recommended way to check email addresses using Breach Report API.</p> <p>Alternatively, the API provides a request accepting a plaintext email address value.</p> <p>This API call returns:</p> <ul> <li>Breach count for unverified emails.</li> <li>Breach count and further details for verified emails.</li> </ul> <p>How to construct the request:</p> <ol> <li>Calculate your email address hash using SHA256.</li> <li>Include the API key in the request header.</li> <li>Specify your hashed email address value in the request body.</li> </ol>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#about-email-address-hashing","title":"About email address hashing","text":"<p>Breach Report API only uses encrypted email address values. The encryption method is Argond2d(SHA256).</p> <p>Before sending a query, generate the email address hash.</p> How to produce an email address hash on Linux, on Mac OS or by using Git Bash on Windows.   1. Convert the email address to lowercase.  2. In the terminal, run the following command:  <pre><code>echo -n {email} | sha256sum\n</code></pre> Here, `{email}` is an email address you want to check. Don't use the brackets!  3.  The command will produce a unique 64-character-long alphanumeric value that will look like this:  <pre><code>8b063d4d3f323127ad8c13example69a747da2421db686144c5c982cc491e1ad\n</code></pre> <p>Or use an online hashing tool, for example, this hash calculator on github.io.</p>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#request-parameters_1","title":"Request parameters","text":"Name Type Description api-key string The key you can generate on the portal. Must be included in the request header. hash string Hashed email address you want to check."},{"location":"To-Be-Migrated/guides/02-check-email-domains/#code-examples_1","title":"Code examples","text":"Shell command example <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/email-hash/check' \\\n--header 'api-key: {{API_KEY}}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'hash=f660ab912ec121d1b1e928a0bb4bc61b15f5ad44d5efdc4e1c92a25e99b8e44a'\n</code></pre> JavaScript code example <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\nvar urlencoded = new URLSearchParams();\nurlencoded.append(\"hash\", \"f660ab912ec121d1b1e928a0bb4bc61b15f5ad44d5efdc4e1c92a25e99b8e44a\");\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: urlencoded,\n  redirect: 'follow'\n};\nfetch(\"{{BASE_URL}}/api/enterprise/v1/email-hash/check\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email-hash/check\"\npayload = 'hash=f660ab912ec121d1b1e928a0bb4bc61b15f5ad44d5efdc4e1c92a25e99b8e44a'\nheaders = {\n  'api-key': '{{API_KEY}}',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/email-hash/check\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest.body = \"hash=f660ab912ec121d1b1e928a0bb4bc61b15f5ad44d5efdc4e1c92a25e99b8e44a\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#response-examples_1","title":"Response examples","text":"Verified email address: Found breaches <pre><code>{\n    \"emailHash\": \"ab912ec121d1b1e928a0bb4bc61b15f5ad44d5efdc4e1c92a25e\",\n    \"records\": 21,\n    \"isAssigned\": true,\n    \"breaches\": [\n        {\n            \"breachId\": 865,\n            \"title\": \"Collection #2 \",\n            \"createdAt\": \"2019-03-06T14:21:14.374Z\",\n            \"compromisedAccounts\": 866851442,\n            \"breachYear\": 2019,\n            \"breachMonth\": 0,\n            \"url\": \"\",\n            \"logo\": \"https://crm.breachreport.com/images/uploads/gbWusP5Upun2DLam.svg\",\n            \"description\": \"As a part of the January 7th 2019 BigDB database leak, Collection #2 exposed more than 800M unique emails and passwords. The BigDB database does not feature new incidents, it is an aggregate file old incidents with newly decrypted passwords which the infosec community couldn't crack before. The file consists of the site data of the most famous services such as quifax and eBay.\",\n            \"breachDataTypes\": [\n                \"email\",\n                \"plaintext password\"\n            ]\n        }\n    ]\n}\n</code></pre> Where:  `email` (string): The email address.   `records` (integer): Incident count for the email address.   `isAssigned` (boolean): Indicator of whether the email is address is assigned to a domain: `true` or `false`.   `breaches`: List / array of data breach incidents and their description.   `breachId` (integer): The ID of the incident in the Breach Report Database.   `title` (string): The title of the incident in the Breach Report Database.   `createdAt` (string): The date the incident was added to the Breach Report Database.   `compromisedAccounts` (integer): The total number of compromised accounts.   `breachYear` (integer): Year the incident occured.   `breachMonth` (integer): Month of the incident.   `breachDay` (integer): Day of the incident.   `url` (string): The URL to the sources of the incident.   `logo` (string): The logo of the incident.   `description` (string): Text description of the incident.   `breachDataTypes`: List / array of exposed credential types in the incident.   Unverified email address: Found breaches   For unverified email addresses, the API only provides a number of breaches (0 if none):  <pre><code>{\n  \"emailHash\": \"d5b474f8a5135b224905b124e32ff50d2f31d95e1b1cdb5c21c36d7a7db58dce\",\n  \"records\": 23,\n  \"isAssigned\": false,\n  \"breaches\": 4\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#check-a-domain-for-compromised-email-addresses","title":"Check a Domain for Compromised Email Addresses","text":"<p>Request URL: <code>{BASE_URL}/api/v1/domain/check</code></p> <p>Request method: <code>POST</code></p> <p>This API call accepts a plaintext web domain value and returns a list of compromised email addresses on this domain.</p> <p>The method is only available to verified domain owners. Refer to the Verifying a Domain section for further information.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the domain in the request body.</li> </ol>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#request-parameters_2","title":"Request Parameters","text":"Name Type Description api-key string The key you can generate on the portal. Must be included in the request header. domain string Web domain to be checked."},{"location":"To-Be-Migrated/guides/02-check-email-domains/#code-examples_2","title":"Code Examples","text":"Shell command example <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/domain/check' \\\n--header 'api-key: {{API_KEY}}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'domain=example.com'\n</code></pre> JavaScript code example <pre><code>// using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar formdata = new FormData();\nformdata.append(\"domain\", \"qip.com \");\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: formdata,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/enterprise/v1/domain/emails\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/dcmain/check\"\npayload = 'domain=example.com'\nheaders = {\n  'api-key': '{{API_KEY}}',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example <pre><code># Sample Ruby code\nrequire \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/domain/check\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest.body = \"domain=example.com\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/02-check-email-domains/#response-examples_2","title":"Response Examples","text":"Found Compromised Email Addresses at this Domain <pre><code>{\n  \"emails\": [\n    \"john.smith@example.com\",\n    \"ivan.wagner@example.com\",\n    \"admin@example.com\"\n  ]\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | emails | list | List / array of compromised email addresses.  |   Found No Compromised Email Addresses at this Domain <pre><code>{\n    \"emails\": []\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | emails | list | Empty list / array for compromised email addresses. |   Cannot show the details for an unverified domain. <pre><code>{\n    \"emails\": []\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | emails | list | Empty list / array for compromised email addresses. |"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/","title":"Manage the watch list","text":"<p>Most Breach Report API calls are only applicable to the email addresses and web domains that have been registered with the consumer's account.</p> <p>This chapter describes the following API calls:</p> <ul> <li>Add an email address to the account</li> <li>Add a web domain to the account</li> <li>Get the list of registered email addresses</li> <li>Get the list of registered web domains</li> <li>Remove an email address from the account</li> <li>Remove a web domain from the account</li> <li>Check a registered email address for data breach incidents</li> <li>Check a registered web domain for compromised email addresses</li> </ul>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#add-an-email-address","title":"Add an Email Address","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email/</code></p> <p>Request method: <code>POST</code></p> <p>This API call accepts an email address and adds it to the Breach Report account. The BR account must be associated with the secret API key (needs to be included in the request header).</p> <p>The API call returns a response code and a status message including the Email ID.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the email address in the request body.</li> </ol>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters","title":"Request parameters","text":"Name Type Description api-key string The key you can generate on the portal. Must be included in the request header. email string Email address to be checked."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#code-examples","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/email' \\\n--header 'api-key: {{API_KEY}}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'email=me@vassily.pro'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\nvar urlencoded = new URLSearchParams();\nurlencoded.append(\"email\", \"test@test.com\");\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: urlencoded,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/email\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email\"\npayload = 'email=me@vassily.pro'\nheaders = {\n  'api-key': '{{API_KEY}}',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{BASE_URL}}/api/v1/email\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest.body = \"email=me@vassily.pro\"\n\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters_1","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. email string Email you want to add to the account for monitoring."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#response-examples","title":"Response Examples","text":""},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#successfully-registred-an-email-address","title":"Successfully registred an email address","text":"<pre><code>{\n  \"status\": \"success\",\n  \"email\": {\n    \"id\": \"5e550fafaab5935e61ce6ddc\",\n    \"emailAddress\": \"john.smith@example.com\"\n  }\n}\n</code></pre> Name Type Description <code>id</code> string ID of the requested email address in the Breach Report database. <code>emailAddress</code> string The requested email address."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#cannot-add-a-registered-email-address-again","title":"Cannot add a registered email address again","text":"<pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email address already exists\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#add-a-domain-name","title":"Add a Domain Name","text":"<p>Request URL: <code>{BASE_URL}/api/v1/domain/</code></p> <p>Request method: <code>POST</code></p> <p>This API request adds an web domain to the Breach Report account. The target Breach Report account must be identified by the API key from the request header. The API call returns a response code and a status message including the Domain ID.</p> <p>Some popular internet domains (gmail.com, facebook.com and such) are included in the API stop list and cannot be added. However, if you represent one of the companies from the stop list and wish to use our service, please contact us at support@breachreport.com.</p> <p>The request returns a response code and a status message.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the domain name in the request body.</li> </ol>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters_2","title":"Request Parameters","text":"Name Type Description <code>api-key</code> string The API key (generated on the portal). Must be included in the request header. <code>domain</code> string Domain to register."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#code-examples_1","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/domain' \\\n--header 'api-key: {{API_KEY}}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'domain=vassily.pro'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\nvar urlencoded = new URLSearchParams();\nurlencoded.append(\"domain\", \"test.com\");\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: urlencoded,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/domain\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/domain\"\npayload = 'domain=vassily.pro'\nheaders = {\n  'api-key': '{{API_KEY}}',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/domain\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest.body = \"domain=vassily.pro\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#response-examples_1","title":"Response Examples","text":""},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#added-the-domain-successfully","title":"Added the domain successfully","text":"<pre><code>{\n  \"status\": \"success\",\n  \"domain\": {\n    \"id\": \"5e751009aab5935e61ce6ddd\",\n    \"domainName\": \"smith-example.com\",\n    \"isVerified\": false,\n    \"txtRecord\": \"brdomaincode=123542-2dfbd-5364-643535\"\n  }\n}\n</code></pre> Name Type Description <code>id</code> string Identifier of the domain. <code>domainName</code> string The domain name. <code>isVerified</code> boolean Indicator of whether the domain is verified. <code>txtRecord</code> string The verification code for your domain. [Add this code as a TXT record for your web site to validate the domain].(03-manage-emails-domains.md#verifying-a-domain)."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#cannot-register-the-same-domain-multiple-times","title":"Cannot register the same domain multiple times","text":"<pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Domain smith-example.com already exists.\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#cannot-register-a-domain-thats-on-the-stop-list","title":"Cannot register a domain that's on the stop list","text":"<pre><code>{\n  \"status\": \"error\",\n  \"message\": \"You cannot add this domain to the watchlist.\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#get-the-email-list","title":"Get the Email List","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email</code></p> <p>Request method: <code>GET</code></p> <p>This call returns the list of email addresses previously registered under the API key owner's account.  </p> <p>To construct the request, include the API key in the request header.</p>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters_3","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#code-examples_2","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request GET '{{BASE_URL}}/api/v1/email' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/email\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/email\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#response-examples_2","title":"Response Examples","text":"Returned the email list. <pre><code>{\n  \"status\": \"success\",\n  \"data\": [\n    {\n      \"id\": \"5e4e968511944f4cf3184eb3\",\n      \"emailAddress\": \"test@test.com\",\n      \"inWatchlist\": true,\n      \"isAssignToDomain\": false\n    },\n    {\n      \"id\": \"5e550fafaab5935e61ce6ddc\",\n      \"emailAddress\": \"john.smith@example.com\",\n      \"inWatchlist\": false,\n      \"isAssignToDomain\": false\n    }\n  ]\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Operation status - `success` or `error`. | | data | nested object | List / array of email address items. | | id | string | Email address ID. | | emailAddress | integer | Plaintext email address. | | inWatchlist | boolean | This logical value shows whether the email address is currently being monitored (`true` or `false`). | | isAssignToDomain | boolean | This value shows whether the email address is currently assigned to a domain. |"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#get-the-domain-list","title":"Get the Domain List","text":"<p>Request URL: <code>{BASE_URL}/api/v1/domain</code></p> <p>Request method: <code>GET</code></p> <p>This call returns the list of web domains attributed to the API key owner's account.  </p> <p>To construct the request, include the API key in the request header.</p>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters_4","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Must be included in the request header."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#code-examples_3","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request GET '{{BASE_URL}}/api/v1/domain' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/email\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\n\nPublic\nimport requests\nurl = \"{{BASE_URL}}/api/v1/domain\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{BASE_URL}}/api/v1/domain\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\n\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#response-examples_3","title":"Response Examples","text":"Returned the domain list. <pre><code>{\n  \"status\": \"success\",\n  \"data\": [\n    {\n      \"id\": \"5e4e978211944f4cf3184eb4\",\n      \"domainName\": \"vassily.pro\",\n      \"inWatchlist\": true,\n      \"emailList\": [\n        {\n          \"id\": \"5e4e9b0d11944f4cf3184eb7\",\n          \"emailAddress\": \"me@vassily.pro\"\n        }\n      ]\n    },\n    {\n      \"id\": \"5e551009aab5935e61ce6ddd\",\n      \"domainName\": \"smith-example.com\",\n      \"inWatchlist\": false,\n      \"emailList\": []\n    }\n  ]\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Operation status - success or error. | | data | integer | List / array of registered web domains. | | domainName | integer | Domain name. | | id | string | The domain's unique identifier in the Breach Report database. | | inWatchlist | boolean | Indicates whether the domain is in the watchlist (in other words, is currently monitored). | | emailList | nested object | Related email addresses, if any. |"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#delete-an-email-address","title":"Delete an Email Address","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email/{EMAIL_ID}</code></p> <p>Request method: <code>DEL</code></p> <p>The API request accepts a previously added email address's ID from the Breach Report database and removes the associated email address from the account.</p> <p>The request returns a response code and a status message.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the Email ID in the requested URL address.</li> </ol>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters_5","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. EMAIL_ID string Identifier of the email address to be removed from the account."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#code-examples_4","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request DELETE '{{BASE_URL}}/api/v1/email/5e4d65741eb6bb316c90fef2' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar requestOptions = {\n  method: 'DELETE',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/email/5e4d65741eb6bb316c90fef2\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email/5e4d65741eb6bb316c90fef2\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/email/5e4d65741eb6bb316c90fef2\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#response-examples_4","title":"Response Examples","text":"Removed the email address successfully. <pre><code>{\n  \"status\": \"success\",\n  \"email\": {\n    \"id\": \"5e4e923611944f4cf3184eb5\",\n    \"emailAddress\": \"john.smith@example.com\"\n  }\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Operation result - `success` or `error`. | | id | string | Email address ID in the Breach Report database. | | emailAddress | boolean | Email is verified the user: True/False. |   Cannot remove an email address that's not registered. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email with current id does not exist\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#delete-a-domain","title":"Delete a Domain","text":"<p>Request URL: <code>{BASE_URL}/api/v1/domain/{DOMAIN_ID}</code></p> <p>Request method: <code>DEL</code></p> <p>The API call accepts a Domain ID and removes the associated domain from the account.</p> <p>The request returns a response code and a status message.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the domain ID in the requested URL address.</li> </ol>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters_6","title":"Request Parameters","text":"Parameter Type Description api-key string An API key you can generate on the portal. Include this key in the request header. DOMAIN_ID string Identified of the domain to be deleted"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#code-examples_5","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request DELETE '{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar requestOptions = {\n  method: 'DELETE',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#response-examples_5","title":"Response Examples","text":"Removed the domain successfully. <pre><code>{\n  \"status\": \"success\",\n  \"domain\": {\n    \"id\": \"5e5643007450412325943862\",\n    \"domainName\": \"test-user3.com\"\n  }\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Success or error. | | id | string | Email address ID in the Breach Report database. | | emailAddress | boolean | Email is verified the user: True/False. |   Cannot remove a domain that's not registered.   {   \"status\": \"error\",   \"message\": \"Domain with current id does not exist\" }"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#check-a-registered-email-address","title":"Check a Registered Email Address","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email/{EMAIL_ID}/check</code></p> <p>Request method: <code>GET</code></p> <p>The request accepts an Email ID and returns information on related data breaches.</p> <p>Alternatively, you may check any email address (previously added or a new one) using a hashed email address value (recommended method) or a plaintext email address.</p> <p>This API call returns:</p> <ul> <li>Incident count for unverified emails.</li> <li>Incident count and the details for verified emails.</li> </ul> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the email ID in the requested URL address.</li> </ol>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters_7","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Should be included in the request header. EMAIL_ID string Identifier of the requested email address."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#code-examples_6","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/email/check' \\\n--header 'api-key: {{API_KEY}}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'email=test@test.com'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/email/5e454bbb575c76a755085afe/check\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email/check\"\npayload = 'email=test@test.com'\nheaders = {\n  'api-key': '{{API_KEY}}',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/email/check\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest.body = \"email=test@test.com\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#response-examples_6","title":"Response Examples","text":"Found data breaches (verified email address). <pre><code>{\n  \"email\": \"john.smith@example.com\",\n  \"records\": 36,\n  \"isAssigned\": true,\n  \"inWatchlist\": false,\n  \"breaches\": [\n    {\n      \"breachId\": 7708,\n      \"title\": \"CouponMom.com\",\n      \"createdAt\": \"2019-03-06T14:22:34.498Z\",\n      \"compromisedAccounts\": 11032696,\n      \"breachYear\": 2014,\n      \"url\": \"https://www.couponmom.com/\",\n      \"logo\": \"https://crm.breachreport.com/images/uploads/U3k2YeESa5BWQrCd.webp\",\n      \"description\": \"In 2014, a file containing data from Coupon Mom website which was alegedly hacked was dumbed on the dark web. It includes 11M email addresses and plaintext passwords. Further investigation showed that the records correspond to the Armor Games breached database. The breach was announced as an exclusive leak to RaidForums website.\",\n      \"breachDataTypes\": [\n        \"email\",\n        \"plaintext password\"\n      ]\n    }\n  ]\n}\n</code></pre> Found data breaches (unverified email address). <pre><code>{\n    \"email\": \"test@example.com\",\n    \"records\": 34924,\n    \"isAssigned\": false,\n    \"breaches\": 3\n}\n</code></pre> Cannot find matches (incorrect Email ID). <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email does not exist\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#check-a-registered-domain","title":"Check a Registered Domain","text":"<p>Request URL: <code>{{BASE_URL}}/api/v1/domain/5e7b8b4b56274b330a50d55f/check?size={{PAGE_SIZE}}&amp;page={{PAGE_NUM}}</code></p> <p>Request method: <code>GET</code></p> <p>This API call has been updated to return information on compromised email addresses and to support output pagination.</p> <p>The API call accepts:</p> <ul> <li>API key</li> <li>Domain ID</li> <li>Page size (number of unique email addresses to include in the output)</li> <li>Page number (position of the email addresses within the output)</li> </ul> <p>The API call returns information on previous data breaches - including data breach information - for the domain.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the Domain ID, page size and page number in the requested URL.</li> </ol>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#request-parameters_8","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Must be included in the request header. DOMAIN_ID string ID of the domain to check. Must be included in the requested URL. PAGE_SIZE integer Max number of email address items to output. Must be included in the requested URL. PAGE_NUM integer Position of output items within the full results list. Must be included in the requested URL."},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#code-examples_7","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request GET '{{BASE_URL}}/api/v1/domain/5e580e0ad336535a8f8f66b8/check?size=10&amp;page=1' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/enterprise/v1/domain/5e580e0ad336535a8f8f66b8/check?size=10&amp;page=1\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/enterprise/v1/domain/5e580e0ad336535a8f8f66b8/check?size=10&amp;page=1\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/enterprise/v1/domain/5e580e0ad336535a8f8f66b8/check?size=10&amp;page=1\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/03-manage-emails-domains/#response-examples_7","title":"Response Examples","text":"Providing data breach information for the domain. <pre><code>{\n  \"domain\": \"qip.com\",\n  \"emailsCount\": 1071,\n  \"isAssigned\": true,\n  \"emails\": [\n    {\n      \"emailAddress\": \"123qwe@qip.com\",\n      \"breaches\": [\n        {\n          \"breachId\": 11691,\n          \"title\": \"Xss.is Combolist\",\n          \"createdAt\": \"2019-10-11T08:31:30.596Z\",\n          \"compromisedAccounts\": 3039418396,\n          \"url\": \"\",\n          \"logo\": \"https://crm.breachreport.com/images/uploads/fvSKpyvOsgOtEejw.png\",\n          \"description\": \"A stolen credentials collection surfaced on the dark web community xss.is. The largest publicly shared file to date discovered by Breach Report, containing over 3 billion user accounts. The file is comprised of pairs of users' email addresses and plaintext passwords, which were hacked from a large number of unidentified websites and then dumped together in this single database.\",\n          \"breachDataTypes\": [\n            \"email\",\n            \"plaintext password\"\n          ]\n        }\n      ]\n    },\n    {\n      \"emailAddress\": \"-1902736@qip.com\",\n      \"breaches\": []\n    }\n  ],\n  \"size\": 10,\n  \"page\": 1\n}\n</code></pre>  |Name|Type|Description| |Name|Type|Description| |---|---|---| |domain|path|string|true|Checked domain URL. | |emailsCount|int|How many known email addresses were compromised on the domain.| |isAssigned|boolean|Whether an email is verified with the issuing account.| |emails|list|Array / list of compromised email addresses with related data incident information.| |size| int|Page size (number of email address items in the output). | |page|int|Page number. | |emailAddress|string|Breach update time.| |breaches|DateTime|Breach added to DB time.| |title|string|Breach title.| |breachId|int|An ID of a breach.| |createdAt|int|An ID of a breach.| |compromisedAccounts|int|Number of compromised accounts in the data incident.| |url|string|The link to breach news source.| |description|string|Description of the breach| |logo| string |Link to the breach logo on Breach Report's internal breach database. | |breachDataTypes| list |List / array of compromised data / credential types (email address, hashed password and such). |   Cannot find a domain with this ID. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Domain does not exist\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/","title":"Monitor domains and email addresses","text":"<p>Breach Report API enables the consumers to put email addresses and web domains on and off the watchlist.</p> <p>If the associated addresses and domains on the watchlist are subject to new data breach incidents, the consumers will be alerted via the Postback URL</p> <p>This chapter describes the following calls:</p> <ul> <li>Start email address monitoring</li> <li>Start domain monitoring</li> <li>Stop email address monitoring</li> <li>Stop domain monitoring</li> <li>Assign an email address to a domain</li> </ul>"},{"location":"To-Be-Migrated/guides/04-monitor/#start-email-monitoring","title":"Start Email Monitoring","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email/{EMAIL_ID}/monitoring</code></p> <p>Request method: <code>POST</code></p> <p>The API monitors the email addresses that are on the watchlist.</p> <p>This API call accepts a previously added email addresses ID and puts the email address on the watchlist.</p> <p>The request returns a response code and a status message.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify your hashed email address in the request body.</li> </ol>"},{"location":"To-Be-Migrated/guides/04-monitor/#request-parameters","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. EMAIL_ID string Identifier of the previously added email address to be put on the watchlist."},{"location":"To-Be-Migrated/guides/04-monitor/#code-examples","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/email/5e4d82ab36839d32685374a6/monitoring' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  redirect: 'follow'\n};\nfetch(\"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email/5e4d82ab36839d32685374a6/monitoring\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/email/5e4d82ab36839d32685374a6/monitoring\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#response-examples","title":"Response Examples","text":"Added the email address to the watchlist successfully. <pre><code>{\n  \"status\": \"success\",\n  \"email\": {\n    \"id\": \"5e550fafaab5935e61ce6ddc\",\n    \"emailAddress\": \"john.smith@example.com\"\n  }\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Success or error. | | id | string | Email address ID in the Breach Report database. | | emailAddress | boolean | Email is verified the user: True/False. |   Cannot put a duplicate email address to the watchlist. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email is already in monitoring list\"\n}\n</code></pre> Cannot find an email address with this ID. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email was not found. Please, add email and send request again.\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#start-domain-monitoring","title":"Start Domain Monitoring","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email/{DOMAIN_ID}/monitoring</code></p> <p>Request method: <code>POST</code></p> <p>The API only monitors the domains that are on the watchlist.</p> <p>This API call accepts a previously added domains's ID and puts the domain on the watchlist. The domain must be associated with the account.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the domain ID inside the requested URL.</li> </ol>"},{"location":"To-Be-Migrated/guides/04-monitor/#request-parameters_1","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. DOMAIN_ID string Identifier of the previously added domain to put on the watchlist."},{"location":"To-Be-Migrated/guides/04-monitor/#code-examples_1","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\n\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#response-examples_1","title":"Response Examples","text":"Added the domain to the watchlist successfully. <pre><code>{\n  \"status\": \"success\",\n  \"domain\": {\n    \"id\": \"5e562eac577e352dc7fae748\",\n    \"domainName\": \"test-user.com\"\n  }\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Success or error. | | id | string | Domain identifier in the Breach Report database. | | domainName | boolean | Domain name. |   Cannot add a duplicate domain to the watchlist. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Domain already added to monitoring list\"\n}\n</code></pre> Cannot find a domain with this ID. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Domain was not found. Please, add email and send request again.\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#stop-email-monitoring","title":"Stop Email Monitoring","text":"<p>Request URL: <code>{BASE_URL}/api/v1/email/{EMAIL_ID}/monitoring</code></p> <p>Request method: <code>DEL</code></p> <p>This API call accepts an email address ID, and removes the email address from the watchlist.  </p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the email address ID inside the requested URL.</li> </ol>"},{"location":"To-Be-Migrated/guides/04-monitor/#request-parameters_2","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. EMAIL_ID string Identifier of the previously added email address to put on the watchlist."},{"location":"To-Be-Migrated/guides/04-monitor/#code-examples_2","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request DELETE '{{BASE_URL}}/api/v1/email/5e4d82ab36839d32685374a6/monitoring' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar requestOptions = {\n  method: 'DELETE',\n  headers: myHeaders,\n  redirect: 'follow'\n};\nfetch(\"{{BASE_URL}}/api/v1/email/5e4d82ab36839d32685374a6/monitoring\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email/5e4d82ab36839d32685374a6/monitoring\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/email/5e4d82ab36839d32685374a6/monitoring\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#response-examples_2","title":"Response Examples","text":"Removed the email address from the watchlist successfully. <pre><code>{\n  \"status\": \"success\",\n  \"email\": {\n    \"id\": \"5e550fafaab5935e61ce6ddc\",\n    \"emailAddress\": \"john.smith@example.com\"\n  }\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Success or error. | | id | string | Email address identifier in the Breach Report database. | | emailAddress | boolean | Email address. |   Cannot remove an email address that's not on the watchlist. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email does not exist in monitoring list\"\n}\n</code></pre> Cannot find an email address with this ID. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email was not found. Please, add email and send request again.\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#stop-domain-monitoring","title":"Stop Domain Monitoring","text":"<p>Request URL: <code>{BASE_URL}/api/v1/domain/{DOMAIN_ID}/monitoring</code></p> <p>Request method: <code>DEL</code></p> <p>This API call accepts a domain ID and removes the domain from the watchlist. The domain must be associated with the account.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the domain ID inside the requested URL.</li> </ol>"},{"location":"To-Be-Migrated/guides/04-monitor/#request-parameters_3","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. DOMAIN_ID string Identifier of the previously added domain to put on the watchlist."},{"location":"To-Be-Migrated/guides/04-monitor/#code-examples_3","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request DELETE '{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar requestOptions = {\n  method: 'DELETE',\n  headers: myHeaders,\n  redirect: 'follow'\n};\nfetch(\"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/domain/5e4d82332d313f32626f8481/monitoring\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#response-examples_3","title":"Response Examples","text":"Removed the domain from the watchlist successfully. <pre><code>{\n  \"status\": \"success\",\n  \"domain\": {\n    \"id\": \"5e4f8cd511944f4cf3184eb9\",\n    \"domainName\": \"test-example.com\"\n  }\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Success or error. | | id | string | Domain identifier in the Breach Report database. | | domainName | boolean | Domain name. |   Cannot remove a domain that is not on the watchlist. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Domain is not on the watchlist\"\n}\n</code></pre> Cannot find a domain with this ID. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Domain was not found. Please, add domain and send request again.\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#assign-an-email-address","title":"Assign an Email Address","text":"<p>Request method: <code>POST</code></p> <p>Request URL: <code>{BASE_URL}/api/v1/email/</code></p> <p>This API call accepts an API key, an email address, an internet domain ID, and assigns the email address to the domain. For the operation to be successful, both email address and domain must already exist in the API key owner's account.</p> <p>The API call returns a response code and a status message.</p> <p>Email address assigning enables the data to be aggregated across the domains registered to the account.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>In the request body, specify the email address and the Domain ID.</li> </ol>"},{"location":"To-Be-Migrated/guides/04-monitor/#request-parameters_4","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. email string Email address in the Breach Report database. domainId string Identifier of the domain in the Breach Report database."},{"location":"To-Be-Migrated/guides/04-monitor/#code-examples_4","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/email' \\\n--header 'api-key: {{API_KEY}}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'email=me@vassily.pro' \\\n--data-urlencode 'domainId=5e4e978211944f4cf3184eb4'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\nvar urlencoded = new URLSearchParams();\nurlencoded.append(\"email\", \"test@test.com\");\nurlencoded.append(\"domainId\", \"5e4d82332d313f32626f8481\");\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: urlencoded,\n  redirect: 'follow'\n};\nfetch(\"{{BASE_URL}}/api/v1/email\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/email\"\npayload = 'email=me@vassily.pro&amp;domainId=5e4e978211944f4cf3184eb4'\nheaders = {\n  'api-key': '{{API_KEY}}',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/email\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest.body = \"email=me@vassily.pro&amp;domainId=5e4e978211944f4cf3184eb4\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/04-monitor/#response-examples_4","title":"Response Examples","text":"Assigned the email address to domain successfully. <pre><code>{\n  \"status\": \"success\",\n  \"email\": {\n    \"id\": \"5e5626c8577e352dc7fae747\",\n    \"emailAddress\": \"john@smith-example.com\"\n  }\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | id | string | ID of the domain the email address will be assigned to. | | emailAddress | string | Email address to be assigned. |   Cannot assign an email address that's already assigned. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email address already exists\"\n}\n</code></pre> Cannot assign an email address that doesn't match the domain. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email domain (example.com) is not equal to target domain (smith-example.com)\"\n}\n</code></pre> Cannot find this email address. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Email address doesn't exist\"\n}\n</code></pre> Cannot find this web domain. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Domain doesn't exist\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/05-postback-url/","title":"Configure postback URL","text":"<p>Breach Report API provides delivery of breach-related notifications to a user-specified URL address (Postback URL Address). See Notification Data Example for the format of data the API provides.</p> <p>The Postback URL Address must start with <code>https://</code> prefix.</p> <p>The delivered updates provide information on discovered breaches for the domains and URL addresses that are on the watchlist.</p> <p>You can manage the Postback URL value using the following operations:</p> <ul> <li>Get current Postback URL Address value</li> <li>Set or update the Postback URL Address</li> <li>Remove the Postback URL Address altogether</li> </ul>"},{"location":"To-Be-Migrated/guides/05-postback-url/#notification-data-format","title":"Notification Data Format","text":"Show the notification data example. <pre><code>{\n \"emails\": [\n  {\n   \"id\": \"5e4d7b69d537e9321c432612\",\n   \"emailAddress\": \"test@test.com\",\n   \"breaches\": [\n    {\n     \"breachId\": 1,\n     \"url\": \"http://Example.org\",\n     \"title\": \"Example.com\",\n     \"compromisedAccounts\": 4540,\n     \"description\": \"In August 2019, breached files from a news platform Example.org surfaced on the web. The files included email accounts and passwords. The owners of the website have not made an official statement and the service was shut down shortly after hack. \",\n     \"breachMonth\": 8,\n     \"breachYear\": 2019,\n     \"breachDataTypes\": [\n      \"email\",\n      \"password\"\n     ]\n    }\n   ]\n  }\n ],\n \"domains\": [\n  {\n   \"id\": \"5e4ee6007c5549457f691cad\",\n   \"domainName\": \"mydomain.com\",\n   \"emails\": [\n    {\n     \"id\": \"5e4ee6267c5549457f691cae\",\n     \"emailAddress\": \"test@mydomain.com\",\n     \"breaches\": [\n      {\n       \"breachId\": 3,\n       \"url\": \"https://www.mozilla.org/\",\n       \"title\": \"MaliceSync.Bforce\",\n       \"compromisedAccounts\": 1694274,\n       \"description\": \"In April 2019, News Services issued an official statement notifying users on discovering a pattern of suspicious login attempts. Apparently attackers gained access to passwords that have been used on breached websites and attempted to login to user accounts.\",\n       \"breachMonth\": 3,\n       \"breachYear\": 2019,\n       \"breachDataTypes\": [\n        \"email\",\n        \"password\"\n       ]\n      }\n     ]\n    }\n   ]\n  }\n ]\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/05-postback-url/#get-the-postback-url-address","title":"Get the Postback URL Address","text":"<p>Request URL: <code>{BASE_URL}/api/v1/postback</code></p> <p>Request method: <code>GET</code></p> <p>Breach Report APi is designed to send notifications to the customer-specified URL address (postback URL).</p> <p>This call returns the current postback URL (if any) the API uses for notifications.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify your hashed email in the request body.</li> </ol>"},{"location":"To-Be-Migrated/guides/05-postback-url/#request-parameters","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. email string Email you want to check."},{"location":"To-Be-Migrated/guides/05-postback-url/#code-examples","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request GET '{{BASE_URL}}/api/v1/postback' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/postback\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/postback\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/postback\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/05-postback-url/#response-examples","title":"Response Examples","text":"Returning the current Postback URL value. <pre><code>{\n  \"status\": \"success\",\n  \"postbackUrl\": \"https://example.com:3080/admin/user/test-webhook-url\"\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Result of the operation: success or error. | | postbackUrl | string | Current Postback URL address configuration. |   Cannot return the Postback URL when it's not configured. <pre><code>{\n  \"status\": \"success\",\n  \"postbackUrl\": null\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/05-postback-url/#set-the-postback-url-address","title":"Set the Postback URL Address","text":"<p>Request URL: <code>{BASE_URL}/api/v1/postback</code></p> <p>Request method: <code>POST</code></p> <p>Breach Report APi is designed to send notifications to the customer-specified URL address (postback URL).</p> <p>This request accepts a URL address and sets it as a target for customer-focused Breach Report API notifications.  </p> <p>The Postback URL Address must start with <code>https://</code> prefix.</p> <p>If a postback URL value was specified before, the call updates it with the new value.</p> <p>How to construct the request:</p> <ol> <li>Include the API key in the request header.</li> <li>Specify the postback URL in the request body.</li> </ol>"},{"location":"To-Be-Migrated/guides/05-postback-url/#request-parameters_1","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header. url string Target postback URL address."},{"location":"To-Be-Migrated/guides/05-postback-url/#code-examples_1","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request POST '{{BASE_URL}}/api/v1/postback' \\\n--header 'api-key: {{API_KEY}}' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'url=http://localhost:3080/admin/user/test-webhook-url'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\nvar urlencoded = new URLSearchParams();\nurlencoded.append(\"url\", \"https://localhost/test-webhook-url\");\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: urlencoded,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/postback\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/postback\"\npayload = 'url=http%3A//localhost%3A3080/admin/user/test-webhook-url'\nheaders = {\n  'api-key': '{{API_KEY}}',\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/postback\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest.body = \"url=http%3A//localhost%3A3080/admin/user/test-webhook-url\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/05-postback-url/#request-parameters_2","title":"Request Parameters","text":"Have set the Postback URL successfully. <pre><code>{\n  \"status\": \"success\",\n  \"postbackUrl\": \"https://example.com:3080/admin/user/test-webhook-url\"\n}\n</code></pre>  | Name | Type | Description | | ------ | ------ | ------ | | status | string | Success or error. | | postbackUrl| [string] | The list of credential types that were compromised in the incident. |   Cannot set a Postback URL address that is not in the correct format`. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Postback URL must started with https and be correct\"\n}\n</code></pre>"},{"location":"To-Be-Migrated/guides/05-postback-url/#clear-the-postback-url-address","title":"Clear the Postback URL Address","text":"<p>Request URL: <code>{BASE_URL}/api/v1/postback</code></p> <p>Request method: <code>DEL</code></p> <p>Breach Report APi is designed to send notifications to the customer-specified URL address (Postback URL address).</p> <p>The request clears the postback URL configuration from your account. As a result of the operation, the API will no longer be able to send you new notifications.</p>"},{"location":"To-Be-Migrated/guides/05-postback-url/#request-parameters_3","title":"Request Parameters","text":"Name Type Description api-key string An API key you can generate on the portal. Include this key in the request header."},{"location":"To-Be-Migrated/guides/05-postback-url/#code-examples_2","title":"Code Examples","text":"Shell command example. <pre><code>curl --location --request DELETE '{{BASE_URL}}/api/v1/postback' \\\n--header 'api-key: {{API_KEY}}'\n</code></pre> JavaScript code example. <pre><code>// Using fetch()\nvar myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"{{API_KEY}}\");\n\nvar requestOptions = {\n  method: 'DELETE',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"{{BASE_URL}}/api/v1/postback\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> Python code example. <pre><code># Using requests\nimport requests\nurl = \"{{BASE_URL}}/api/v1/postback\"\npayload = {}\nheaders = {\n  'api-key': '{{API_KEY}}'\n}\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> Ruby code example. <pre><code>require \"uri\"\nrequire \"net/http\"\nurl = URI(\"{{BASE_URL}}/api/v1/postback\")\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"api-key\"] = \"{{API_KEY}}\"\nresponse = http.request(request)\nputs response.read_body\n</code></pre>"},{"location":"To-Be-Migrated/guides/05-postback-url/#response-examples_1","title":"Response Examples","text":"Cleared the Postback URL configuration successfully. <pre><code>{\n  \"status\": \"success\"\n}\n</code></pre> Cannot clear a Postback URL value that's not configured. <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Postback urls does not exist\"\n}\n</code></pre>"}]}